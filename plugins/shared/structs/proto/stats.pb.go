// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: plugins/shared/structs/proto/stats.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StatObject is a collection of statistics either exposed at the top
// level or via nested StatObjects.
type StatObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nested is a mapping of object name to a nested stats object.
	Nested map[string]*StatObject `protobuf:"bytes,1,rep,name=nested,proto3" json:"nested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// attributes is a mapping of statistic name to its value.
	Attributes map[string]*StatValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatObject) Reset() {
	*x = StatObject{}
	mi := &file_plugins_shared_structs_proto_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatObject) ProtoMessage() {}

func (x *StatObject) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_shared_structs_proto_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatObject.ProtoReflect.Descriptor instead.
func (*StatObject) Descriptor() ([]byte, []int) {
	return file_plugins_shared_structs_proto_stats_proto_rawDescGZIP(), []int{0}
}

func (x *StatObject) GetNested() map[string]*StatObject {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *StatObject) GetAttributes() map[string]*StatValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// StatValue exposes the values of a particular statistic. The value may
// be of type double, integer, string or boolean. Numeric types can be
// exposed as a single value or as a fraction.
type StatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// float_numerator_val exposes a floating point value. If denominator
	// is set it is assumed to be a fractional value, otherwise it is a
	// scalar.
	FloatNumeratorVal   *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=float_numerator_val,json=floatNumeratorVal,proto3" json:"float_numerator_val,omitempty"`
	FloatDenominatorVal *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=float_denominator_val,json=floatDenominatorVal,proto3" json:"float_denominator_val,omitempty"`
	// int_numerator_val exposes a int value. If denominator
	// is set it is assumed to be a fractional value, otherwise it is a
	// scalar.
	IntNumeratorVal   *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=int_numerator_val,json=intNumeratorVal,proto3" json:"int_numerator_val,omitempty"`
	IntDenominatorVal *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=int_denominator_val,json=intDenominatorVal,proto3" json:"int_denominator_val,omitempty"`
	// string_val exposes a string value. These are likely annotations.
	StringVal *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	// bool_val exposes a boolean statistic.
	BoolVal *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	// unit gives the unit type: Â°F, %, MHz, MB, etc.
	Unit string `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`
	// desc provides a human readable description of the statistic.
	Desc string `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *StatValue) Reset() {
	*x = StatValue{}
	mi := &file_plugins_shared_structs_proto_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValue) ProtoMessage() {}

func (x *StatValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_shared_structs_proto_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValue.ProtoReflect.Descriptor instead.
func (*StatValue) Descriptor() ([]byte, []int) {
	return file_plugins_shared_structs_proto_stats_proto_rawDescGZIP(), []int{1}
}

func (x *StatValue) GetFloatNumeratorVal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.FloatNumeratorVal
	}
	return nil
}

func (x *StatValue) GetFloatDenominatorVal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.FloatDenominatorVal
	}
	return nil
}

func (x *StatValue) GetIntNumeratorVal() *wrapperspb.Int64Value {
	if x != nil {
		return x.IntNumeratorVal
	}
	return nil
}

func (x *StatValue) GetIntDenominatorVal() *wrapperspb.Int64Value {
	if x != nil {
		return x.IntDenominatorVal
	}
	return nil
}

func (x *StatValue) GetStringVal() *wrapperspb.StringValue {
	if x != nil {
		return x.StringVal
	}
	return nil
}

func (x *StatValue) GetBoolVal() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolVal
	}
	return nil
}

func (x *StatValue) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *StatValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

var File_plugins_shared_structs_proto_stats_proto protoreflect.FileDescriptor

var file_plugins_shared_structs_proto_stats_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa9, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x56, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x6d, 0x0a,
	0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd,
	0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x15, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12,
	0x35, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x42, 0x20,
	0x5a, 0x1e, 0x2e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugins_shared_structs_proto_stats_proto_rawDescOnce sync.Once
	file_plugins_shared_structs_proto_stats_proto_rawDescData = file_plugins_shared_structs_proto_stats_proto_rawDesc
)

func file_plugins_shared_structs_proto_stats_proto_rawDescGZIP() []byte {
	file_plugins_shared_structs_proto_stats_proto_rawDescOnce.Do(func() {
		file_plugins_shared_structs_proto_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_shared_structs_proto_stats_proto_rawDescData)
	})
	return file_plugins_shared_structs_proto_stats_proto_rawDescData
}

var file_plugins_shared_structs_proto_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_plugins_shared_structs_proto_stats_proto_goTypes = []any{
	(*StatObject)(nil),             // 0: hashicorp.nomad.plugins.shared.structs.StatObject
	(*StatValue)(nil),              // 1: hashicorp.nomad.plugins.shared.structs.StatValue
	nil,                            // 2: hashicorp.nomad.plugins.shared.structs.StatObject.NestedEntry
	nil,                            // 3: hashicorp.nomad.plugins.shared.structs.StatObject.AttributesEntry
	(*wrapperspb.DoubleValue)(nil), // 4: google.protobuf.DoubleValue
	(*wrapperspb.Int64Value)(nil),  // 5: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 6: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),   // 7: google.protobuf.BoolValue
}
var file_plugins_shared_structs_proto_stats_proto_depIdxs = []int32{
	2,  // 0: hashicorp.nomad.plugins.shared.structs.StatObject.nested:type_name -> hashicorp.nomad.plugins.shared.structs.StatObject.NestedEntry
	3,  // 1: hashicorp.nomad.plugins.shared.structs.StatObject.attributes:type_name -> hashicorp.nomad.plugins.shared.structs.StatObject.AttributesEntry
	4,  // 2: hashicorp.nomad.plugins.shared.structs.StatValue.float_numerator_val:type_name -> google.protobuf.DoubleValue
	4,  // 3: hashicorp.nomad.plugins.shared.structs.StatValue.float_denominator_val:type_name -> google.protobuf.DoubleValue
	5,  // 4: hashicorp.nomad.plugins.shared.structs.StatValue.int_numerator_val:type_name -> google.protobuf.Int64Value
	5,  // 5: hashicorp.nomad.plugins.shared.structs.StatValue.int_denominator_val:type_name -> google.protobuf.Int64Value
	6,  // 6: hashicorp.nomad.plugins.shared.structs.StatValue.string_val:type_name -> google.protobuf.StringValue
	7,  // 7: hashicorp.nomad.plugins.shared.structs.StatValue.bool_val:type_name -> google.protobuf.BoolValue
	0,  // 8: hashicorp.nomad.plugins.shared.structs.StatObject.NestedEntry.value:type_name -> hashicorp.nomad.plugins.shared.structs.StatObject
	1,  // 9: hashicorp.nomad.plugins.shared.structs.StatObject.AttributesEntry.value:type_name -> hashicorp.nomad.plugins.shared.structs.StatValue
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_plugins_shared_structs_proto_stats_proto_init() }
func file_plugins_shared_structs_proto_stats_proto_init() {
	if File_plugins_shared_structs_proto_stats_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_shared_structs_proto_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugins_shared_structs_proto_stats_proto_goTypes,
		DependencyIndexes: file_plugins_shared_structs_proto_stats_proto_depIdxs,
		MessageInfos:      file_plugins_shared_structs_proto_stats_proto_msgTypes,
	}.Build()
	File_plugins_shared_structs_proto_stats_proto = out.File
	file_plugins_shared_structs_proto_stats_proto_rawDesc = nil
	file_plugins_shared_structs_proto_stats_proto_goTypes = nil
	file_plugins_shared_structs_proto_stats_proto_depIdxs = nil
}
