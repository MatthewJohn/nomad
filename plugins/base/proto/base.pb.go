// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: plugins/base/proto/base.proto

package proto

import (
	hclspec "github.com/hashicorp/nomad/plugins/shared/hclspec"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PluginType enumerates the type of plugins Nomad supports
type PluginType int32

const (
	PluginType_UNKNOWN PluginType = 0
	PluginType_DRIVER  PluginType = 2
	PluginType_DEVICE  PluginType = 3
)

// Enum value maps for PluginType.
var (
	PluginType_name = map[int32]string{
		0: "UNKNOWN",
		2: "DRIVER",
		3: "DEVICE",
	}
	PluginType_value = map[string]int32{
		"UNKNOWN": 0,
		"DRIVER":  2,
		"DEVICE":  3,
	}
)

func (x PluginType) Enum() *PluginType {
	p := new(PluginType)
	*p = x
	return p
}

func (x PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_base_proto_base_proto_enumTypes[0].Descriptor()
}

func (PluginType) Type() protoreflect.EnumType {
	return &file_plugins_base_proto_base_proto_enumTypes[0]
}

func (x PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType.Descriptor instead.
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{0}
}

type CoreGrade int32

const (
	CoreGrade_Performance CoreGrade = 0
	CoreGrade_Efficiency  CoreGrade = 1
)

// Enum value maps for CoreGrade.
var (
	CoreGrade_name = map[int32]string{
		0: "Performance",
		1: "Efficiency",
	}
	CoreGrade_value = map[string]int32{
		"Performance": 0,
		"Efficiency":  1,
	}
)

func (x CoreGrade) Enum() *CoreGrade {
	p := new(CoreGrade)
	*p = x
	return p
}

func (x CoreGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_base_proto_base_proto_enumTypes[1].Descriptor()
}

func (CoreGrade) Type() protoreflect.EnumType {
	return &file_plugins_base_proto_base_proto_enumTypes[1]
}

func (x CoreGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreGrade.Descriptor instead.
func (CoreGrade) EnumDescriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{1}
}

// PluginInfoRequest is used to request the plugins basic information.
type PluginInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PluginInfoRequest) Reset() {
	*x = PluginInfoRequest{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfoRequest) ProtoMessage() {}

func (x *PluginInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfoRequest.ProtoReflect.Descriptor instead.
func (*PluginInfoRequest) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{0}
}

// PluginInfoResponse returns basic information about the plugin such
// that Nomad can decide whether to load the plugin or not.
type PluginInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type indicates what type of plugin this is.
	Type PluginType `protobuf:"varint,1,opt,name=type,proto3,enum=hashicorp.nomad.plugins.base.proto.PluginType" json:"type,omitempty"`
	// plugin_api_versions indicates the versions of the Nomad Plugin API
	// this plugin supports.
	PluginApiVersions []string `protobuf:"bytes,2,rep,name=plugin_api_versions,json=pluginApiVersions,proto3" json:"plugin_api_versions,omitempty"`
	// plugin_version is the semver version of this individual plugin.
	// This is divorce from Nomadâ€™s development and versioning.
	PluginVersion string `protobuf:"bytes,3,opt,name=plugin_version,json=pluginVersion,proto3" json:"plugin_version,omitempty"`
	// name is the name of the plugin
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PluginInfoResponse) Reset() {
	*x = PluginInfoResponse{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfoResponse) ProtoMessage() {}

func (x *PluginInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfoResponse.ProtoReflect.Descriptor instead.
func (*PluginInfoResponse) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{1}
}

func (x *PluginInfoResponse) GetType() PluginType {
	if x != nil {
		return x.Type
	}
	return PluginType_UNKNOWN
}

func (x *PluginInfoResponse) GetPluginApiVersions() []string {
	if x != nil {
		return x.PluginApiVersions
	}
	return nil
}

func (x *PluginInfoResponse) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *PluginInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ConfigSchemaRequest is used to request the configurations schema.
type ConfigSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigSchemaRequest) Reset() {
	*x = ConfigSchemaRequest{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSchemaRequest) ProtoMessage() {}

func (x *ConfigSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSchemaRequest.ProtoReflect.Descriptor instead.
func (*ConfigSchemaRequest) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{2}
}

// ConfigSchemaResponse returns the plugins configuration schema.
type ConfigSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// spec is the plugins configuration schema
	Spec *hclspec.Spec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ConfigSchemaResponse) Reset() {
	*x = ConfigSchemaResponse{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSchemaResponse) ProtoMessage() {}

func (x *ConfigSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSchemaResponse.ProtoReflect.Descriptor instead.
func (*ConfigSchemaResponse) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigSchemaResponse) GetSpec() *hclspec.Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// SetConfigRequest is used to set the configuration
type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// msgpack_config is the configuration encoded as MessagePack.
	MsgpackConfig []byte `protobuf:"bytes,1,opt,name=msgpack_config,json=msgpackConfig,proto3" json:"msgpack_config,omitempty"`
	// nomad_config is the nomad client configuration sent to all plugins.
	NomadConfig *NomadConfig `protobuf:"bytes,2,opt,name=nomad_config,json=nomadConfig,proto3" json:"nomad_config,omitempty"`
	// plugin_api_version is the api version to use.
	PluginApiVersion string `protobuf:"bytes,3,opt,name=plugin_api_version,json=pluginApiVersion,proto3" json:"plugin_api_version,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{4}
}

func (x *SetConfigRequest) GetMsgpackConfig() []byte {
	if x != nil {
		return x.MsgpackConfig
	}
	return nil
}

func (x *SetConfigRequest) GetNomadConfig() *NomadConfig {
	if x != nil {
		return x.NomadConfig
	}
	return nil
}

func (x *SetConfigRequest) GetPluginApiVersion() string {
	if x != nil {
		return x.PluginApiVersion
	}
	return ""
}

// NomadConfig is the client configuration sent to all plugins
type NomadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// driver specific configuration sent to all plugins
	Driver *NomadDriverConfig `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (x *NomadConfig) Reset() {
	*x = NomadConfig{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NomadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomadConfig) ProtoMessage() {}

func (x *NomadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomadConfig.ProtoReflect.Descriptor instead.
func (*NomadConfig) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{5}
}

func (x *NomadConfig) GetDriver() *NomadDriverConfig {
	if x != nil {
		return x.Driver
	}
	return nil
}

// NomadDriverConfig is the driver specific client configuration sent to all
// driver plugins
type NomadDriverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientMaxPort is the upper range of the ports that the client uses for
	// communicating with plugin subsystems over loopback
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	ClientMaxPort uint32 `protobuf:"varint,1,opt,name=ClientMaxPort,proto3" json:"ClientMaxPort,omitempty"`
	// ClientMinPort is the lower range of the ports that the client uses for
	// communicating with plugin subsystems over loopback
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	ClientMinPort uint32 `protobuf:"varint,2,opt,name=ClientMinPort,proto3" json:"ClientMinPort,omitempty"`
	// Topology is the complex hardware topology detected by the client
	// combined with client configuration.
	Topology *ClientTopology `protobuf:"bytes,3,opt,name=Topology,proto3" json:"Topology,omitempty"`
}

func (x *NomadDriverConfig) Reset() {
	*x = NomadDriverConfig{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NomadDriverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomadDriverConfig) ProtoMessage() {}

func (x *NomadDriverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomadDriverConfig.ProtoReflect.Descriptor instead.
func (*NomadDriverConfig) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{6}
}

func (x *NomadDriverConfig) GetClientMaxPort() uint32 {
	if x != nil {
		return x.ClientMaxPort
	}
	return 0
}

func (x *NomadDriverConfig) GetClientMinPort() uint32 {
	if x != nil {
		return x.ClientMinPort
	}
	return 0
}

func (x *NomadDriverConfig) GetTopology() *ClientTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

// numalib/Topology
type ClientTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds                []uint32              `protobuf:"varint,1,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	Distances              *ClientTopologySLIT   `protobuf:"bytes,2,opt,name=distances,proto3" json:"distances,omitempty"`
	Cores                  []*ClientTopologyCore `protobuf:"bytes,3,rep,name=cores,proto3" json:"cores,omitempty"`
	OverrideTotalCompute   uint64                `protobuf:"varint,4,opt,name=override_total_compute,json=overrideTotalCompute,proto3" json:"override_total_compute,omitempty"`
	OverrideWitholdCompute uint64                `protobuf:"varint,5,opt,name=override_withold_compute,json=overrideWitholdCompute,proto3" json:"override_withold_compute,omitempty"`
}

func (x *ClientTopology) Reset() {
	*x = ClientTopology{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTopology) ProtoMessage() {}

func (x *ClientTopology) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTopology.ProtoReflect.Descriptor instead.
func (*ClientTopology) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{7}
}

func (x *ClientTopology) GetNodeIds() []uint32 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *ClientTopology) GetDistances() *ClientTopologySLIT {
	if x != nil {
		return x.Distances
	}
	return nil
}

func (x *ClientTopology) GetCores() []*ClientTopologyCore {
	if x != nil {
		return x.Cores
	}
	return nil
}

func (x *ClientTopology) GetOverrideTotalCompute() uint64 {
	if x != nil {
		return x.OverrideTotalCompute
	}
	return 0
}

func (x *ClientTopology) GetOverrideWitholdCompute() uint64 {
	if x != nil {
		return x.OverrideWitholdCompute
	}
	return 0
}

// numalib/SLIT
type ClientTopologySLIT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dimension is the row and column size of the slit matrix
	Dimension uint32 `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// values is the flattened matrix of slit values
	Values []uint32 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ClientTopologySLIT) Reset() {
	*x = ClientTopologySLIT{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientTopologySLIT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTopologySLIT) ProtoMessage() {}

func (x *ClientTopologySLIT) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTopologySLIT.ProtoReflect.Descriptor instead.
func (*ClientTopologySLIT) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{8}
}

func (x *ClientTopologySLIT) GetDimension() uint32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *ClientTopologySLIT) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// numalib/Core
type ClientTopologyCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketId   uint32    `protobuf:"varint,1,opt,name=socket_id,json=socketId,proto3" json:"socket_id,omitempty"`
	NodeId     uint32    `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CoreId     uint32    `protobuf:"varint,3,opt,name=core_id,json=coreId,proto3" json:"core_id,omitempty"`
	CoreGrade  CoreGrade `protobuf:"varint,4,opt,name=core_grade,json=coreGrade,proto3,enum=hashicorp.nomad.plugins.base.proto.CoreGrade" json:"core_grade,omitempty"`
	Disable    bool      `protobuf:"varint,5,opt,name=disable,proto3" json:"disable,omitempty"`
	BaseSpeed  uint64    `protobuf:"varint,6,opt,name=base_speed,json=baseSpeed,proto3" json:"base_speed,omitempty"`
	MaxSpeed   uint64    `protobuf:"varint,7,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	GuessSpeed uint64    `protobuf:"varint,8,opt,name=guess_speed,json=guessSpeed,proto3" json:"guess_speed,omitempty"`
}

func (x *ClientTopologyCore) Reset() {
	*x = ClientTopologyCore{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientTopologyCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTopologyCore) ProtoMessage() {}

func (x *ClientTopologyCore) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTopologyCore.ProtoReflect.Descriptor instead.
func (*ClientTopologyCore) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{9}
}

func (x *ClientTopologyCore) GetSocketId() uint32 {
	if x != nil {
		return x.SocketId
	}
	return 0
}

func (x *ClientTopologyCore) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ClientTopologyCore) GetCoreId() uint32 {
	if x != nil {
		return x.CoreId
	}
	return 0
}

func (x *ClientTopologyCore) GetCoreGrade() CoreGrade {
	if x != nil {
		return x.CoreGrade
	}
	return CoreGrade_Performance
}

func (x *ClientTopologyCore) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *ClientTopologyCore) GetBaseSpeed() uint64 {
	if x != nil {
		return x.BaseSpeed
	}
	return 0
}

func (x *ClientTopologyCore) GetMaxSpeed() uint64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *ClientTopologyCore) GetGuessSpeed() uint64 {
	if x != nil {
		return x.GuessSpeed
	}
	return 0
}

// SetConfigResponse is used to respond to setting the configuration
type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	mi := &file_plugins_base_proto_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_base_proto_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_plugins_base_proto_base_proto_rawDescGZIP(), []int{10}
}

var File_plugins_base_proto_base_proto protoreflect.FileDescriptor

var file_plugins_base_proto_base_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x22, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x68, 0x63, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x68, 0x63, 0x6c, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc3, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x68, 0x63, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x52, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x6d, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6d, 0x61, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x6d, 0x61, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x22, 0xbf, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x4c, 0x49, 0x54, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x4c, 0x49, 0x54, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x31, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x09, 0x43, 0x6f, 0x72,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x01, 0x32, 0x8d, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x7d, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugins_base_proto_base_proto_rawDescOnce sync.Once
	file_plugins_base_proto_base_proto_rawDescData = file_plugins_base_proto_base_proto_rawDesc
)

func file_plugins_base_proto_base_proto_rawDescGZIP() []byte {
	file_plugins_base_proto_base_proto_rawDescOnce.Do(func() {
		file_plugins_base_proto_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_base_proto_base_proto_rawDescData)
	})
	return file_plugins_base_proto_base_proto_rawDescData
}

var file_plugins_base_proto_base_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_plugins_base_proto_base_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_plugins_base_proto_base_proto_goTypes = []any{
	(PluginType)(0),              // 0: hashicorp.nomad.plugins.base.proto.PluginType
	(CoreGrade)(0),               // 1: hashicorp.nomad.plugins.base.proto.CoreGrade
	(*PluginInfoRequest)(nil),    // 2: hashicorp.nomad.plugins.base.proto.PluginInfoRequest
	(*PluginInfoResponse)(nil),   // 3: hashicorp.nomad.plugins.base.proto.PluginInfoResponse
	(*ConfigSchemaRequest)(nil),  // 4: hashicorp.nomad.plugins.base.proto.ConfigSchemaRequest
	(*ConfigSchemaResponse)(nil), // 5: hashicorp.nomad.plugins.base.proto.ConfigSchemaResponse
	(*SetConfigRequest)(nil),     // 6: hashicorp.nomad.plugins.base.proto.SetConfigRequest
	(*NomadConfig)(nil),          // 7: hashicorp.nomad.plugins.base.proto.NomadConfig
	(*NomadDriverConfig)(nil),    // 8: hashicorp.nomad.plugins.base.proto.NomadDriverConfig
	(*ClientTopology)(nil),       // 9: hashicorp.nomad.plugins.base.proto.ClientTopology
	(*ClientTopologySLIT)(nil),   // 10: hashicorp.nomad.plugins.base.proto.ClientTopologySLIT
	(*ClientTopologyCore)(nil),   // 11: hashicorp.nomad.plugins.base.proto.ClientTopologyCore
	(*SetConfigResponse)(nil),    // 12: hashicorp.nomad.plugins.base.proto.SetConfigResponse
	(*hclspec.Spec)(nil),         // 13: hashicorp.nomad.plugins.shared.hclspec.Spec
}
var file_plugins_base_proto_base_proto_depIdxs = []int32{
	0,  // 0: hashicorp.nomad.plugins.base.proto.PluginInfoResponse.type:type_name -> hashicorp.nomad.plugins.base.proto.PluginType
	13, // 1: hashicorp.nomad.plugins.base.proto.ConfigSchemaResponse.spec:type_name -> hashicorp.nomad.plugins.shared.hclspec.Spec
	7,  // 2: hashicorp.nomad.plugins.base.proto.SetConfigRequest.nomad_config:type_name -> hashicorp.nomad.plugins.base.proto.NomadConfig
	8,  // 3: hashicorp.nomad.plugins.base.proto.NomadConfig.driver:type_name -> hashicorp.nomad.plugins.base.proto.NomadDriverConfig
	9,  // 4: hashicorp.nomad.plugins.base.proto.NomadDriverConfig.Topology:type_name -> hashicorp.nomad.plugins.base.proto.ClientTopology
	10, // 5: hashicorp.nomad.plugins.base.proto.ClientTopology.distances:type_name -> hashicorp.nomad.plugins.base.proto.ClientTopologySLIT
	11, // 6: hashicorp.nomad.plugins.base.proto.ClientTopology.cores:type_name -> hashicorp.nomad.plugins.base.proto.ClientTopologyCore
	1,  // 7: hashicorp.nomad.plugins.base.proto.ClientTopologyCore.core_grade:type_name -> hashicorp.nomad.plugins.base.proto.CoreGrade
	2,  // 8: hashicorp.nomad.plugins.base.proto.BasePlugin.PluginInfo:input_type -> hashicorp.nomad.plugins.base.proto.PluginInfoRequest
	4,  // 9: hashicorp.nomad.plugins.base.proto.BasePlugin.ConfigSchema:input_type -> hashicorp.nomad.plugins.base.proto.ConfigSchemaRequest
	6,  // 10: hashicorp.nomad.plugins.base.proto.BasePlugin.SetConfig:input_type -> hashicorp.nomad.plugins.base.proto.SetConfigRequest
	3,  // 11: hashicorp.nomad.plugins.base.proto.BasePlugin.PluginInfo:output_type -> hashicorp.nomad.plugins.base.proto.PluginInfoResponse
	5,  // 12: hashicorp.nomad.plugins.base.proto.BasePlugin.ConfigSchema:output_type -> hashicorp.nomad.plugins.base.proto.ConfigSchemaResponse
	12, // 13: hashicorp.nomad.plugins.base.proto.BasePlugin.SetConfig:output_type -> hashicorp.nomad.plugins.base.proto.SetConfigResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_plugins_base_proto_base_proto_init() }
func file_plugins_base_proto_base_proto_init() {
	if File_plugins_base_proto_base_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_base_proto_base_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugins_base_proto_base_proto_goTypes,
		DependencyIndexes: file_plugins_base_proto_base_proto_depIdxs,
		EnumInfos:         file_plugins_base_proto_base_proto_enumTypes,
		MessageInfos:      file_plugins_base_proto_base_proto_msgTypes,
	}.Build()
	File_plugins_base_proto_base_proto = out.File
	file_plugins_base_proto_base_proto_rawDesc = nil
	file_plugins_base_proto_base_proto_goTypes = nil
	file_plugins_base_proto_base_proto_depIdxs = nil
}
