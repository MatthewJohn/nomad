// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: plugins/drivers/proto/driver.proto

package proto

import (
	hclspec "./plugins/shared/hclspec"
	proto "./plugins/shared/structs/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskState int32

const (
	TaskState_UNKNOWN TaskState = 0
	TaskState_RUNNING TaskState = 1
	TaskState_EXITED  TaskState = 2
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "EXITED",
	}
	TaskState_value = map[string]int32{
		"UNKNOWN": 0,
		"RUNNING": 1,
		"EXITED":  2,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[0].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[0]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{0}
}

type FingerprintResponse_HealthState int32

const (
	FingerprintResponse_UNDETECTED FingerprintResponse_HealthState = 0
	FingerprintResponse_UNHEALTHY  FingerprintResponse_HealthState = 1
	FingerprintResponse_HEALTHY    FingerprintResponse_HealthState = 2
)

// Enum value maps for FingerprintResponse_HealthState.
var (
	FingerprintResponse_HealthState_name = map[int32]string{
		0: "UNDETECTED",
		1: "UNHEALTHY",
		2: "HEALTHY",
	}
	FingerprintResponse_HealthState_value = map[string]int32{
		"UNDETECTED": 0,
		"UNHEALTHY":  1,
		"HEALTHY":    2,
	}
)

func (x FingerprintResponse_HealthState) Enum() *FingerprintResponse_HealthState {
	p := new(FingerprintResponse_HealthState)
	*p = x
	return p
}

func (x FingerprintResponse_HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FingerprintResponse_HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[1].Descriptor()
}

func (FingerprintResponse_HealthState) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[1]
}

func (x FingerprintResponse_HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FingerprintResponse_HealthState.Descriptor instead.
func (FingerprintResponse_HealthState) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{5, 0}
}

type StartTaskResponse_Result int32

const (
	StartTaskResponse_SUCCESS StartTaskResponse_Result = 0
	StartTaskResponse_RETRY   StartTaskResponse_Result = 1
	StartTaskResponse_FATAL   StartTaskResponse_Result = 2
)

// Enum value maps for StartTaskResponse_Result.
var (
	StartTaskResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "RETRY",
		2: "FATAL",
	}
	StartTaskResponse_Result_value = map[string]int32{
		"SUCCESS": 0,
		"RETRY":   1,
		"FATAL":   2,
	}
)

func (x StartTaskResponse_Result) Enum() *StartTaskResponse_Result {
	p := new(StartTaskResponse_Result)
	*p = x
	return p
}

func (x StartTaskResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartTaskResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[2].Descriptor()
}

func (StartTaskResponse_Result) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[2]
}

func (x StartTaskResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartTaskResponse_Result.Descriptor instead.
func (StartTaskResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{9, 0}
}

type DriverCapabilities_FSIsolation int32

const (
	DriverCapabilities_NONE   DriverCapabilities_FSIsolation = 0
	DriverCapabilities_CHROOT DriverCapabilities_FSIsolation = 1
	DriverCapabilities_IMAGE  DriverCapabilities_FSIsolation = 2
	DriverCapabilities_UNVEIL DriverCapabilities_FSIsolation = 3
)

// Enum value maps for DriverCapabilities_FSIsolation.
var (
	DriverCapabilities_FSIsolation_name = map[int32]string{
		0: "NONE",
		1: "CHROOT",
		2: "IMAGE",
		3: "UNVEIL",
	}
	DriverCapabilities_FSIsolation_value = map[string]int32{
		"NONE":   0,
		"CHROOT": 1,
		"IMAGE":  2,
		"UNVEIL": 3,
	}
)

func (x DriverCapabilities_FSIsolation) Enum() *DriverCapabilities_FSIsolation {
	p := new(DriverCapabilities_FSIsolation)
	*p = x
	return p
}

func (x DriverCapabilities_FSIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverCapabilities_FSIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[3].Descriptor()
}

func (DriverCapabilities_FSIsolation) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[3]
}

func (x DriverCapabilities_FSIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriverCapabilities_FSIsolation.Descriptor instead.
func (DriverCapabilities_FSIsolation) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{32, 0}
}

type DriverCapabilities_MountConfigs int32

const (
	DriverCapabilities_UNKNOWN_MOUNTS DriverCapabilities_MountConfigs = 0 // treated as ANY_MOUNTS for backwards compatibility
	DriverCapabilities_ANY_MOUNTS     DriverCapabilities_MountConfigs = 0
	DriverCapabilities_NO_MOUNTS      DriverCapabilities_MountConfigs = 1
)

// Enum value maps for DriverCapabilities_MountConfigs.
var (
	DriverCapabilities_MountConfigs_name = map[int32]string{
		0: "UNKNOWN_MOUNTS",
		// Duplicate value: 0: "ANY_MOUNTS",
		1: "NO_MOUNTS",
	}
	DriverCapabilities_MountConfigs_value = map[string]int32{
		"UNKNOWN_MOUNTS": 0,
		"ANY_MOUNTS":     0,
		"NO_MOUNTS":      1,
	}
)

func (x DriverCapabilities_MountConfigs) Enum() *DriverCapabilities_MountConfigs {
	p := new(DriverCapabilities_MountConfigs)
	*p = x
	return p
}

func (x DriverCapabilities_MountConfigs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverCapabilities_MountConfigs) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[4].Descriptor()
}

func (DriverCapabilities_MountConfigs) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[4]
}

func (x DriverCapabilities_MountConfigs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriverCapabilities_MountConfigs.Descriptor instead.
func (DriverCapabilities_MountConfigs) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{32, 1}
}

type NetworkIsolationSpec_NetworkIsolationMode int32

const (
	NetworkIsolationSpec_HOST  NetworkIsolationSpec_NetworkIsolationMode = 0
	NetworkIsolationSpec_GROUP NetworkIsolationSpec_NetworkIsolationMode = 1
	NetworkIsolationSpec_TASK  NetworkIsolationSpec_NetworkIsolationMode = 2
	NetworkIsolationSpec_NONE  NetworkIsolationSpec_NetworkIsolationMode = 3
)

// Enum value maps for NetworkIsolationSpec_NetworkIsolationMode.
var (
	NetworkIsolationSpec_NetworkIsolationMode_name = map[int32]string{
		0: "HOST",
		1: "GROUP",
		2: "TASK",
		3: "NONE",
	}
	NetworkIsolationSpec_NetworkIsolationMode_value = map[string]int32{
		"HOST":  0,
		"GROUP": 1,
		"TASK":  2,
		"NONE":  3,
	}
)

func (x NetworkIsolationSpec_NetworkIsolationMode) Enum() *NetworkIsolationSpec_NetworkIsolationMode {
	p := new(NetworkIsolationSpec_NetworkIsolationMode)
	*p = x
	return p
}

func (x NetworkIsolationSpec_NetworkIsolationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkIsolationSpec_NetworkIsolationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[5].Descriptor()
}

func (NetworkIsolationSpec_NetworkIsolationMode) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[5]
}

func (x NetworkIsolationSpec_NetworkIsolationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkIsolationSpec_NetworkIsolationMode.Descriptor instead.
func (NetworkIsolationSpec_NetworkIsolationMode) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{33, 0}
}

type CPUUsage_Fields int32

const (
	CPUUsage_SYSTEM_MODE       CPUUsage_Fields = 0
	CPUUsage_USER_MODE         CPUUsage_Fields = 1
	CPUUsage_TOTAL_TICKS       CPUUsage_Fields = 2
	CPUUsage_THROTTLED_PERIODS CPUUsage_Fields = 3
	CPUUsage_THROTTLED_TIME    CPUUsage_Fields = 4
	CPUUsage_PERCENT           CPUUsage_Fields = 5
)

// Enum value maps for CPUUsage_Fields.
var (
	CPUUsage_Fields_name = map[int32]string{
		0: "SYSTEM_MODE",
		1: "USER_MODE",
		2: "TOTAL_TICKS",
		3: "THROTTLED_PERIODS",
		4: "THROTTLED_TIME",
		5: "PERCENT",
	}
	CPUUsage_Fields_value = map[string]int32{
		"SYSTEM_MODE":       0,
		"USER_MODE":         1,
		"TOTAL_TICKS":       2,
		"THROTTLED_PERIODS": 3,
		"THROTTLED_TIME":    4,
		"PERCENT":           5,
	}
)

func (x CPUUsage_Fields) Enum() *CPUUsage_Fields {
	p := new(CPUUsage_Fields)
	*p = x
	return p
}

func (x CPUUsage_Fields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CPUUsage_Fields) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[6].Descriptor()
}

func (CPUUsage_Fields) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[6]
}

func (x CPUUsage_Fields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CPUUsage_Fields.Descriptor instead.
func (CPUUsage_Fields) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{54, 0}
}

type MemoryUsage_Fields int32

const (
	MemoryUsage_RSS              MemoryUsage_Fields = 0
	MemoryUsage_CACHE            MemoryUsage_Fields = 1
	MemoryUsage_MAX_USAGE        MemoryUsage_Fields = 2
	MemoryUsage_KERNEL_USAGE     MemoryUsage_Fields = 3
	MemoryUsage_KERNEL_MAX_USAGE MemoryUsage_Fields = 4
	MemoryUsage_USAGE            MemoryUsage_Fields = 5
	MemoryUsage_SWAP             MemoryUsage_Fields = 6
)

// Enum value maps for MemoryUsage_Fields.
var (
	MemoryUsage_Fields_name = map[int32]string{
		0: "RSS",
		1: "CACHE",
		2: "MAX_USAGE",
		3: "KERNEL_USAGE",
		4: "KERNEL_MAX_USAGE",
		5: "USAGE",
		6: "SWAP",
	}
	MemoryUsage_Fields_value = map[string]int32{
		"RSS":              0,
		"CACHE":            1,
		"MAX_USAGE":        2,
		"KERNEL_USAGE":     3,
		"KERNEL_MAX_USAGE": 4,
		"USAGE":            5,
		"SWAP":             6,
	}
)

func (x MemoryUsage_Fields) Enum() *MemoryUsage_Fields {
	p := new(MemoryUsage_Fields)
	*p = x
	return p
}

func (x MemoryUsage_Fields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryUsage_Fields) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_drivers_proto_driver_proto_enumTypes[7].Descriptor()
}

func (MemoryUsage_Fields) Type() protoreflect.EnumType {
	return &file_plugins_drivers_proto_driver_proto_enumTypes[7]
}

func (x MemoryUsage_Fields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryUsage_Fields.Descriptor instead.
func (MemoryUsage_Fields) EnumDescriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{55, 0}
}

type TaskConfigSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskConfigSchemaRequest) Reset() {
	*x = TaskConfigSchemaRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfigSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfigSchemaRequest) ProtoMessage() {}

func (x *TaskConfigSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfigSchemaRequest.ProtoReflect.Descriptor instead.
func (*TaskConfigSchemaRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{0}
}

type TaskConfigSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec is the configuration schema for the job driver config block
	Spec *hclspec.Spec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TaskConfigSchemaResponse) Reset() {
	*x = TaskConfigSchemaResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfigSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfigSchemaResponse) ProtoMessage() {}

func (x *TaskConfigSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfigSchemaResponse.ProtoReflect.Descriptor instead.
func (*TaskConfigSchemaResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{1}
}

func (x *TaskConfigSchemaResponse) GetSpec() *hclspec.Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CapabilitiesRequest) Reset() {
	*x = CapabilitiesRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesRequest) ProtoMessage() {}

func (x *CapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*CapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{2}
}

type CapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Capabilities provides a way for the driver to denote if it implements
	// non-core RPCs. Some Driver service RPCs expose additional information
	// or functionality outside of the core task management functions. These
	// RPCs are only implemented if the driver sets the corresponding capability.
	Capabilities *DriverCapabilities `protobuf:"bytes,1,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *CapabilitiesResponse) Reset() {
	*x = CapabilitiesResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesResponse) ProtoMessage() {}

func (x *CapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{3}
}

func (x *CapabilitiesResponse) GetCapabilities() *DriverCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type FingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FingerprintRequest) Reset() {
	*x = FingerprintRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintRequest) ProtoMessage() {}

func (x *FingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintRequest.ProtoReflect.Descriptor instead.
func (*FingerprintRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{4}
}

type FingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attributes are key/value pairs that annotate the nomad client and can be
	// used in scheduling constraints and affinities.
	Attributes map[string]*proto.Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Health is used to determine the state of the health the driver is in.
	// Health can be one of the following states:
	//   - UNDETECTED: driver dependencies are not met and the driver can not start
	//   - UNHEALTHY: driver dependencies are met but the driver is unable to
	//     perform operations due to some other problem
	//   - HEALTHY: driver is able to perform all operations
	Health FingerprintResponse_HealthState `protobuf:"varint,2,opt,name=health,proto3,enum=hashicorp.nomad.plugins.drivers.proto.FingerprintResponse_HealthState" json:"health,omitempty"`
	// HealthDescription is a human readable message describing the current
	// state of driver health
	HealthDescription string `protobuf:"bytes,3,opt,name=health_description,json=healthDescription,proto3" json:"health_description,omitempty"`
}

func (x *FingerprintResponse) Reset() {
	*x = FingerprintResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintResponse) ProtoMessage() {}

func (x *FingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintResponse.ProtoReflect.Descriptor instead.
func (*FingerprintResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{5}
}

func (x *FingerprintResponse) GetAttributes() map[string]*proto.Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FingerprintResponse) GetHealth() FingerprintResponse_HealthState {
	if x != nil {
		return x.Health
	}
	return FingerprintResponse_UNDETECTED
}

func (x *FingerprintResponse) GetHealthDescription() string {
	if x != nil {
		return x.HealthDescription
	}
	return ""
}

type RecoverTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Handle is the TaskHandle returned from StartTask
	Handle *TaskHandle `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *RecoverTaskRequest) Reset() {
	*x = RecoverTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTaskRequest) ProtoMessage() {}

func (x *RecoverTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{6}
}

func (x *RecoverTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RecoverTaskRequest) GetHandle() *TaskHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type RecoverTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecoverTaskResponse) Reset() {
	*x = RecoverTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTaskResponse) ProtoMessage() {}

func (x *RecoverTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTaskResponse.ProtoReflect.Descriptor instead.
func (*RecoverTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{7}
}

type StartTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task configuration to launch
	Task *TaskConfig `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *StartTaskRequest) Reset() {
	*x = StartTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskRequest) ProtoMessage() {}

func (x *StartTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskRequest.ProtoReflect.Descriptor instead.
func (*StartTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{8}
}

func (x *StartTaskRequest) GetTask() *TaskConfig {
	if x != nil {
		return x.Task
	}
	return nil
}

type StartTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result is set depending on the type of error that occurred while starting
	// a task:
	//
	//   - SUCCESS: No error occurred, handle is set
	//   - RETRY: An error occurred, but is recoverable and the RPC should be retried
	//   - FATAL: A fatal error occurred and is not likely to succeed if retried
	//
	// If Result is not successful, the DriverErrorMsg will be set.
	Result StartTaskResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=hashicorp.nomad.plugins.drivers.proto.StartTaskResponse_Result" json:"result,omitempty"`
	// DriverErrorMsg is set if an error occurred
	DriverErrorMsg string `protobuf:"bytes,2,opt,name=driver_error_msg,json=driverErrorMsg,proto3" json:"driver_error_msg,omitempty"`
	// Handle is opaque to the client, but must be stored in order to recover
	// the task.
	Handle *TaskHandle `protobuf:"bytes,3,opt,name=handle,proto3" json:"handle,omitempty"`
	// NetworkOverride is set if the driver sets network settings and the service ip/port
	// needs to be set differently.
	NetworkOverride *NetworkOverride `protobuf:"bytes,4,opt,name=network_override,json=networkOverride,proto3" json:"network_override,omitempty"`
}

func (x *StartTaskResponse) Reset() {
	*x = StartTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskResponse) ProtoMessage() {}

func (x *StartTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskResponse.ProtoReflect.Descriptor instead.
func (*StartTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{9}
}

func (x *StartTaskResponse) GetResult() StartTaskResponse_Result {
	if x != nil {
		return x.Result
	}
	return StartTaskResponse_SUCCESS
}

func (x *StartTaskResponse) GetDriverErrorMsg() string {
	if x != nil {
		return x.DriverErrorMsg
	}
	return ""
}

func (x *StartTaskResponse) GetHandle() *TaskHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *StartTaskResponse) GetNetworkOverride() *NetworkOverride {
	if x != nil {
		return x.NetworkOverride
	}
	return nil
}

type WaitTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *WaitTaskRequest) Reset() {
	*x = WaitTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitTaskRequest) ProtoMessage() {}

func (x *WaitTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitTaskRequest.ProtoReflect.Descriptor instead.
func (*WaitTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{10}
}

func (x *WaitTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type WaitTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result is the exit status of the task
	Result *ExitResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Err is set if any driver error occurred while waiting for the task
	Err string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *WaitTaskResponse) Reset() {
	*x = WaitTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitTaskResponse) ProtoMessage() {}

func (x *WaitTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitTaskResponse.ProtoReflect.Descriptor instead.
func (*WaitTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{11}
}

func (x *WaitTaskResponse) GetResult() *ExitResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WaitTaskResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type StopTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Timeout defines the amount of time to wait before forcefully killing
	// the task. For example, on Unix clients, this means sending a SIGKILL to
	// the process.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Signal can be set to override the Task's configured shutdown signal
	Signal string `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *StopTaskRequest) Reset() {
	*x = StopTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskRequest) ProtoMessage() {}

func (x *StopTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskRequest.ProtoReflect.Descriptor instead.
func (*StopTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{12}
}

func (x *StopTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StopTaskRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StopTaskRequest) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

type StopTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopTaskResponse) Reset() {
	*x = StopTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskResponse) ProtoMessage() {}

func (x *StopTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskResponse.ProtoReflect.Descriptor instead.
func (*StopTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{13}
}

type DestroyTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Force destroys the task even if it is still in a running state
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DestroyTaskRequest) Reset() {
	*x = DestroyTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyTaskRequest) ProtoMessage() {}

func (x *DestroyTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyTaskRequest.ProtoReflect.Descriptor instead.
func (*DestroyTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{14}
}

func (x *DestroyTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DestroyTaskRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DestroyTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestroyTaskResponse) Reset() {
	*x = DestroyTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyTaskResponse) ProtoMessage() {}

func (x *DestroyTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyTaskResponse.ProtoReflect.Descriptor instead.
func (*DestroyTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{15}
}

type InspectTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *InspectTaskRequest) Reset() {
	*x = InspectTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspectTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectTaskRequest) ProtoMessage() {}

func (x *InspectTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectTaskRequest.ProtoReflect.Descriptor instead.
func (*InspectTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{16}
}

func (x *InspectTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type InspectTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task details
	Task *TaskStatus `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// Driver details for task
	Driver *TaskDriverStatus `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	// NetworkOverride info if set
	NetworkOverride *NetworkOverride `protobuf:"bytes,3,opt,name=network_override,json=networkOverride,proto3" json:"network_override,omitempty"`
}

func (x *InspectTaskResponse) Reset() {
	*x = InspectTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspectTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectTaskResponse) ProtoMessage() {}

func (x *InspectTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectTaskResponse.ProtoReflect.Descriptor instead.
func (*InspectTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{17}
}

func (x *InspectTaskResponse) GetTask() *TaskStatus {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *InspectTaskResponse) GetDriver() *TaskDriverStatus {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *InspectTaskResponse) GetNetworkOverride() *NetworkOverride {
	if x != nil {
		return x.NetworkOverride
	}
	return nil
}

type TaskStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// CollectionInterval is the interval at which to stream stats to the caller
	CollectionInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=collection_interval,json=collectionInterval,proto3" json:"collection_interval,omitempty"`
}

func (x *TaskStatsRequest) Reset() {
	*x = TaskStatsRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatsRequest) ProtoMessage() {}

func (x *TaskStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatsRequest.ProtoReflect.Descriptor instead.
func (*TaskStatsRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{18}
}

func (x *TaskStatsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStatsRequest) GetCollectionInterval() *durationpb.Duration {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

type TaskStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats for the task
	Stats *TaskStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *TaskStatsResponse) Reset() {
	*x = TaskStatsResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatsResponse) ProtoMessage() {}

func (x *TaskStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatsResponse.ProtoReflect.Descriptor instead.
func (*TaskStatsResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{19}
}

func (x *TaskStatsResponse) GetStats() *TaskStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type TaskEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskEventsRequest) Reset() {
	*x = TaskEventsRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEventsRequest) ProtoMessage() {}

func (x *TaskEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEventsRequest.ProtoReflect.Descriptor instead.
func (*TaskEventsRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{20}
}

type SignalTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Signal is the operating system signal to send to the task. Ex: SIGHUP
	Signal string `protobuf:"bytes,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *SignalTaskRequest) Reset() {
	*x = SignalTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalTaskRequest) ProtoMessage() {}

func (x *SignalTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalTaskRequest.ProtoReflect.Descriptor instead.
func (*SignalTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{21}
}

func (x *SignalTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SignalTaskRequest) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

type SignalTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalTaskResponse) Reset() {
	*x = SignalTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalTaskResponse) ProtoMessage() {}

func (x *SignalTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalTaskResponse.ProtoReflect.Descriptor instead.
func (*SignalTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{22}
}

type ExecTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the ID of the target task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Command is the command to execute in the task environment
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	// Timeout is the amount of time to wait for the command to stop.
	// Defaults to 0 (run forever)
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ExecTaskRequest) Reset() {
	*x = ExecTaskRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskRequest) ProtoMessage() {}

func (x *ExecTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskRequest.ProtoReflect.Descriptor instead.
func (*ExecTaskRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{23}
}

func (x *ExecTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecTaskRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecTaskRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ExecTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stdout from the exec
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Stderr from the exec
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Result from the exec
	Result *ExitResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecTaskResponse) Reset() {
	*x = ExecTaskResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskResponse) ProtoMessage() {}

func (x *ExecTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskResponse.ProtoReflect.Descriptor instead.
func (*ExecTaskResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{24}
}

func (x *ExecTaskResponse) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecTaskResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecTaskResponse) GetResult() *ExitResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecTaskStreamingIOOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Close bool   `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *ExecTaskStreamingIOOperation) Reset() {
	*x = ExecTaskStreamingIOOperation{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskStreamingIOOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskStreamingIOOperation) ProtoMessage() {}

func (x *ExecTaskStreamingIOOperation) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskStreamingIOOperation.ProtoReflect.Descriptor instead.
func (*ExecTaskStreamingIOOperation) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{25}
}

func (x *ExecTaskStreamingIOOperation) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecTaskStreamingIOOperation) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type ExecTaskStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setup   *ExecTaskStreamingRequest_Setup        `protobuf:"bytes,1,opt,name=setup,proto3" json:"setup,omitempty"`
	TtySize *ExecTaskStreamingRequest_TerminalSize `protobuf:"bytes,2,opt,name=tty_size,json=ttySize,proto3" json:"tty_size,omitempty"`
	Stdin   *ExecTaskStreamingIOOperation          `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
}

func (x *ExecTaskStreamingRequest) Reset() {
	*x = ExecTaskStreamingRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskStreamingRequest) ProtoMessage() {}

func (x *ExecTaskStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskStreamingRequest.ProtoReflect.Descriptor instead.
func (*ExecTaskStreamingRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{26}
}

func (x *ExecTaskStreamingRequest) GetSetup() *ExecTaskStreamingRequest_Setup {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *ExecTaskStreamingRequest) GetTtySize() *ExecTaskStreamingRequest_TerminalSize {
	if x != nil {
		return x.TtySize
	}
	return nil
}

func (x *ExecTaskStreamingRequest) GetStdin() *ExecTaskStreamingIOOperation {
	if x != nil {
		return x.Stdin
	}
	return nil
}

type ExecTaskStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout *ExecTaskStreamingIOOperation `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr *ExecTaskStreamingIOOperation `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Exited bool                          `protobuf:"varint,3,opt,name=exited,proto3" json:"exited,omitempty"`
	Result *ExitResult                   `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecTaskStreamingResponse) Reset() {
	*x = ExecTaskStreamingResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskStreamingResponse) ProtoMessage() {}

func (x *ExecTaskStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskStreamingResponse.ProtoReflect.Descriptor instead.
func (*ExecTaskStreamingResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{27}
}

func (x *ExecTaskStreamingResponse) GetStdout() *ExecTaskStreamingIOOperation {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecTaskStreamingResponse) GetStderr() *ExecTaskStreamingIOOperation {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecTaskStreamingResponse) GetExited() bool {
	if x != nil {
		return x.Exited
	}
	return false
}

func (x *ExecTaskStreamingResponse) GetResult() *ExitResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllocID of the allocation the network is associated with
	AllocId string `protobuf:"bytes,1,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	// Hostname of the network namespace
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{28}
}

func (x *CreateNetworkRequest) GetAllocId() string {
	if x != nil {
		return x.AllocId
	}
	return ""
}

func (x *CreateNetworkRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type CreateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsolationSpec *NetworkIsolationSpec `protobuf:"bytes,1,opt,name=isolation_spec,json=isolationSpec,proto3" json:"isolation_spec,omitempty"`
	// created indicates that the network namespace is newly created
	// as a result of this request. if false, the NetworkIsolationSpec
	// value returned is an existing spec.
	Created bool `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateNetworkResponse) Reset() {
	*x = CreateNetworkResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkResponse) ProtoMessage() {}

func (x *CreateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{29}
}

func (x *CreateNetworkResponse) GetIsolationSpec() *NetworkIsolationSpec {
	if x != nil {
		return x.IsolationSpec
	}
	return nil
}

func (x *CreateNetworkResponse) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

type DestroyNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllocID of the allocation the network is associated with
	AllocId       string                `protobuf:"bytes,1,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	IsolationSpec *NetworkIsolationSpec `protobuf:"bytes,2,opt,name=isolation_spec,json=isolationSpec,proto3" json:"isolation_spec,omitempty"`
}

func (x *DestroyNetworkRequest) Reset() {
	*x = DestroyNetworkRequest{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyNetworkRequest) ProtoMessage() {}

func (x *DestroyNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyNetworkRequest.ProtoReflect.Descriptor instead.
func (*DestroyNetworkRequest) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{30}
}

func (x *DestroyNetworkRequest) GetAllocId() string {
	if x != nil {
		return x.AllocId
	}
	return ""
}

func (x *DestroyNetworkRequest) GetIsolationSpec() *NetworkIsolationSpec {
	if x != nil {
		return x.IsolationSpec
	}
	return nil
}

type DestroyNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestroyNetworkResponse) Reset() {
	*x = DestroyNetworkResponse{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyNetworkResponse) ProtoMessage() {}

func (x *DestroyNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyNetworkResponse.ProtoReflect.Descriptor instead.
func (*DestroyNetworkResponse) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{31}
}

type DriverCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SendSignals indicates that the driver can send process signals (ex. SIGUSR1)
	// to the task.
	SendSignals bool `protobuf:"varint,1,opt,name=send_signals,json=sendSignals,proto3" json:"send_signals,omitempty"`
	// Exec indicates that the driver supports executing arbitrary commands
	// in the task's execution environment.
	Exec bool `protobuf:"varint,2,opt,name=exec,proto3" json:"exec,omitempty"`
	// FsIsolation indicates what kind of filesystem isolation a driver supports.
	FsIsolation           DriverCapabilities_FSIsolation              `protobuf:"varint,3,opt,name=fs_isolation,json=fsIsolation,proto3,enum=hashicorp.nomad.plugins.drivers.proto.DriverCapabilities_FSIsolation" json:"fs_isolation,omitempty"`
	NetworkIsolationModes []NetworkIsolationSpec_NetworkIsolationMode `protobuf:"varint,4,rep,packed,name=network_isolation_modes,json=networkIsolationModes,proto3,enum=hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec_NetworkIsolationMode" json:"network_isolation_modes,omitempty"`
	MustCreateNetwork     bool                                        `protobuf:"varint,5,opt,name=must_create_network,json=mustCreateNetwork,proto3" json:"must_create_network,omitempty"`
	// MountConfigs indicates whether the driver supports mount configurations.
	MountConfigs DriverCapabilities_MountConfigs `protobuf:"varint,6,opt,name=mount_configs,json=mountConfigs,proto3,enum=hashicorp.nomad.plugins.drivers.proto.DriverCapabilities_MountConfigs" json:"mount_configs,omitempty"`
	// remote_tasks indicates whether the driver executes tasks remotely such
	// on cloud runtimes like AWS ECS.
	//
	// Deprecated: Marked as deprecated in plugins/drivers/proto/driver.proto.
	RemoteTasks bool `protobuf:"varint,7,opt,name=remote_tasks,json=remoteTasks,proto3" json:"remote_tasks,omitempty"`
	// disable_log_collection indicates whether the driver has the capability of
	// disabling log collection
	DisableLogCollection bool `protobuf:"varint,8,opt,name=disable_log_collection,json=disableLogCollection,proto3" json:"disable_log_collection,omitempty"`
	// dynamic_workload_users indicates the task is capable of using UID/GID
	// assigned from the Nomad client as user credentials for the task.
	DynamicWorkloadUsers bool `protobuf:"varint,9,opt,name=dynamic_workload_users,json=dynamicWorkloadUsers,proto3" json:"dynamic_workload_users,omitempty"`
}

func (x *DriverCapabilities) Reset() {
	*x = DriverCapabilities{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCapabilities) ProtoMessage() {}

func (x *DriverCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCapabilities.ProtoReflect.Descriptor instead.
func (*DriverCapabilities) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{32}
}

func (x *DriverCapabilities) GetSendSignals() bool {
	if x != nil {
		return x.SendSignals
	}
	return false
}

func (x *DriverCapabilities) GetExec() bool {
	if x != nil {
		return x.Exec
	}
	return false
}

func (x *DriverCapabilities) GetFsIsolation() DriverCapabilities_FSIsolation {
	if x != nil {
		return x.FsIsolation
	}
	return DriverCapabilities_NONE
}

func (x *DriverCapabilities) GetNetworkIsolationModes() []NetworkIsolationSpec_NetworkIsolationMode {
	if x != nil {
		return x.NetworkIsolationModes
	}
	return nil
}

func (x *DriverCapabilities) GetMustCreateNetwork() bool {
	if x != nil {
		return x.MustCreateNetwork
	}
	return false
}

func (x *DriverCapabilities) GetMountConfigs() DriverCapabilities_MountConfigs {
	if x != nil {
		return x.MountConfigs
	}
	return DriverCapabilities_UNKNOWN_MOUNTS
}

// Deprecated: Marked as deprecated in plugins/drivers/proto/driver.proto.
func (x *DriverCapabilities) GetRemoteTasks() bool {
	if x != nil {
		return x.RemoteTasks
	}
	return false
}

func (x *DriverCapabilities) GetDisableLogCollection() bool {
	if x != nil {
		return x.DisableLogCollection
	}
	return false
}

func (x *DriverCapabilities) GetDynamicWorkloadUsers() bool {
	if x != nil {
		return x.DynamicWorkloadUsers
	}
	return false
}

type NetworkIsolationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode        NetworkIsolationSpec_NetworkIsolationMode `protobuf:"varint,1,opt,name=mode,proto3,enum=hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec_NetworkIsolationMode" json:"mode,omitempty"`
	Path        string                                    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Labels      map[string]string                         `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HostsConfig *HostsConfig                              `protobuf:"bytes,4,opt,name=hostsConfig,proto3" json:"hostsConfig,omitempty"`
}

func (x *NetworkIsolationSpec) Reset() {
	*x = NetworkIsolationSpec{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkIsolationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkIsolationSpec) ProtoMessage() {}

func (x *NetworkIsolationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkIsolationSpec.ProtoReflect.Descriptor instead.
func (*NetworkIsolationSpec) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{33}
}

func (x *NetworkIsolationSpec) GetMode() NetworkIsolationSpec_NetworkIsolationMode {
	if x != nil {
		return x.Mode
	}
	return NetworkIsolationSpec_HOST
}

func (x *NetworkIsolationSpec) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NetworkIsolationSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkIsolationSpec) GetHostsConfig() *HostsConfig {
	if x != nil {
		return x.HostsConfig
	}
	return nil
}

type HostsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *HostsConfig) Reset() {
	*x = HostsConfig{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostsConfig) ProtoMessage() {}

func (x *HostsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostsConfig.ProtoReflect.Descriptor instead.
func (*HostsConfig) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{34}
}

func (x *HostsConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostsConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers  []string `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	Searches []string `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	Options  []string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{35}
}

func (x *DNSConfig) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *DNSConfig) GetSearches() []string {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *DNSConfig) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type TaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the task, recommended to the globally unique, must be unique to the driver.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the task
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// MsgpackDriverConfig is the encoded driver configuation of the task
	MsgpackDriverConfig []byte `protobuf:"bytes,3,opt,name=msgpack_driver_config,json=msgpackDriverConfig,proto3" json:"msgpack_driver_config,omitempty"`
	// Env is the a set of key/value pairs to be set as environment variables
	Env map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DeviceEnv is the set of environment variables that are defined by device
	// plugins. This allows the driver to differentiate environment variables
	// set by the device plugins and those by the user. When populating the
	// task's environment env should be used.
	DeviceEnv map[string]string `protobuf:"bytes,5,rep,name=device_env,json=deviceEnv,proto3" json:"device_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Resources defines the resources to isolate
	Resources *Resources `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	// Mounts is a list of targets to bind mount into the task directory
	Mounts []*Mount `protobuf:"bytes,7,rep,name=mounts,proto3" json:"mounts,omitempty"`
	// Devices is a list of system devices to mount into the task's execution
	// environment.
	Devices []*Device `protobuf:"bytes,8,rep,name=devices,proto3" json:"devices,omitempty"`
	// User defines the operating system user the tasks should run as
	User string `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	// AllocDir is the directory on the host where the allocation directory
	// exists.
	AllocDir string `protobuf:"bytes,10,opt,name=alloc_dir,json=allocDir,proto3" json:"alloc_dir,omitempty"`
	// StdoutPath is the path to the file to open and write task stdout to
	StdoutPath string `protobuf:"bytes,11,opt,name=stdout_path,json=stdoutPath,proto3" json:"stdout_path,omitempty"`
	// StderrPath is the path to the file to open and write task stderr to
	StderrPath string `protobuf:"bytes,12,opt,name=stderr_path,json=stderrPath,proto3" json:"stderr_path,omitempty"`
	// TaskGroupName is the name of the task group which this task is a member of
	TaskGroupName string `protobuf:"bytes,13,opt,name=task_group_name,json=taskGroupName,proto3" json:"task_group_name,omitempty"`
	// JobName is the name of the job of which this task is part of
	JobName string `protobuf:"bytes,14,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// AllocId is the ID of the associated allocation
	AllocId string `protobuf:"bytes,15,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	// NetworkIsolationSpec specifies the configuration for the network namespace
	// to use for the task. *Only supported on Linux
	NetworkIsolationSpec *NetworkIsolationSpec `protobuf:"bytes,16,opt,name=network_isolation_spec,json=networkIsolationSpec,proto3" json:"network_isolation_spec,omitempty"`
	// DNSConfig is the configuration for task DNS resolvers and other options
	Dns *DNSConfig `protobuf:"bytes,17,opt,name=dns,proto3" json:"dns,omitempty"`
	// JobId is the ID of the job of which this task is part of
	JobId string `protobuf:"bytes,18,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Namespace is the namespace of the job of which this task is part of
	Namespace string `protobuf:"bytes,19,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// NodeName is the name of the node where the associated allocation is running
	NodeName string `protobuf:"bytes,20,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// NodeId is the ID of the node where the associated allocation is running
	NodeId string `protobuf:"bytes,21,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// ParentJobID is the parent id for dispatch and periodic jobs
	ParentJobId string `protobuf:"bytes,22,opt,name=parent_job_id,json=parentJobId,proto3" json:"parent_job_id,omitempty"`
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{36}
}

func (x *TaskConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskConfig) GetMsgpackDriverConfig() []byte {
	if x != nil {
		return x.MsgpackDriverConfig
	}
	return nil
}

func (x *TaskConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskConfig) GetDeviceEnv() map[string]string {
	if x != nil {
		return x.DeviceEnv
	}
	return nil
}

func (x *TaskConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskConfig) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *TaskConfig) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TaskConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskConfig) GetAllocDir() string {
	if x != nil {
		return x.AllocDir
	}
	return ""
}

func (x *TaskConfig) GetStdoutPath() string {
	if x != nil {
		return x.StdoutPath
	}
	return ""
}

func (x *TaskConfig) GetStderrPath() string {
	if x != nil {
		return x.StderrPath
	}
	return ""
}

func (x *TaskConfig) GetTaskGroupName() string {
	if x != nil {
		return x.TaskGroupName
	}
	return ""
}

func (x *TaskConfig) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *TaskConfig) GetAllocId() string {
	if x != nil {
		return x.AllocId
	}
	return ""
}

func (x *TaskConfig) GetNetworkIsolationSpec() *NetworkIsolationSpec {
	if x != nil {
		return x.NetworkIsolationSpec
	}
	return nil
}

func (x *TaskConfig) GetDns() *DNSConfig {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *TaskConfig) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TaskConfig) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TaskConfig) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskConfig) GetParentJobId() string {
	if x != nil {
		return x.ParentJobId
	}
	return ""
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllocatedResources are the resources set for the task
	AllocatedResources *AllocatedTaskResources `protobuf:"bytes,1,opt,name=allocated_resources,json=allocatedResources,proto3" json:"allocated_resources,omitempty"`
	// LinuxResources are the computed values to set for specific Linux features
	LinuxResources *LinuxResources `protobuf:"bytes,2,opt,name=linux_resources,json=linuxResources,proto3" json:"linux_resources,omitempty"`
	// Ports are the allocated port mappings for the allocation.
	// A task may use these to manually configure port mapping if shared network namespaces aren't being used.
	Ports []*PortMapping `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{37}
}

func (x *Resources) GetAllocatedResources() *AllocatedTaskResources {
	if x != nil {
		return x.AllocatedResources
	}
	return nil
}

func (x *Resources) GetLinuxResources() *LinuxResources {
	if x != nil {
		return x.LinuxResources
	}
	return nil
}

func (x *Resources) GetPorts() []*PortMapping {
	if x != nil {
		return x.Ports
	}
	return nil
}

type AllocatedTaskResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu      *AllocatedCpuResources    `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory   *AllocatedMemoryResources `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Networks []*NetworkResource        `protobuf:"bytes,5,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *AllocatedTaskResources) Reset() {
	*x = AllocatedTaskResources{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatedTaskResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedTaskResources) ProtoMessage() {}

func (x *AllocatedTaskResources) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedTaskResources.ProtoReflect.Descriptor instead.
func (*AllocatedTaskResources) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{38}
}

func (x *AllocatedTaskResources) GetCpu() *AllocatedCpuResources {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *AllocatedTaskResources) GetMemory() *AllocatedMemoryResources {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *AllocatedTaskResources) GetNetworks() []*NetworkResource {
	if x != nil {
		return x.Networks
	}
	return nil
}

type AllocatedCpuResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuShares int64 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
}

func (x *AllocatedCpuResources) Reset() {
	*x = AllocatedCpuResources{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatedCpuResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedCpuResources) ProtoMessage() {}

func (x *AllocatedCpuResources) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedCpuResources.ProtoReflect.Descriptor instead.
func (*AllocatedCpuResources) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{39}
}

func (x *AllocatedCpuResources) GetCpuShares() int64 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

type AllocatedMemoryResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryMb    int64 `protobuf:"varint,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	MemoryMaxMb int64 `protobuf:"varint,3,opt,name=memory_max_mb,json=memoryMaxMb,proto3" json:"memory_max_mb,omitempty"`
}

func (x *AllocatedMemoryResources) Reset() {
	*x = AllocatedMemoryResources{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatedMemoryResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedMemoryResources) ProtoMessage() {}

func (x *AllocatedMemoryResources) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedMemoryResources.ProtoReflect.Descriptor instead.
func (*AllocatedMemoryResources) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{40}
}

func (x *AllocatedMemoryResources) GetMemoryMb() int64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *AllocatedMemoryResources) GetMemoryMaxMb() int64 {
	if x != nil {
		return x.MemoryMaxMb
	}
	return 0
}

type NetworkResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device        string         `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Cidr          string         `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Ip            string         `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Mbits         int32          `protobuf:"varint,4,opt,name=mbits,proto3" json:"mbits,omitempty"`
	ReservedPorts []*NetworkPort `protobuf:"bytes,5,rep,name=reserved_ports,json=reservedPorts,proto3" json:"reserved_ports,omitempty"`
	DynamicPorts  []*NetworkPort `protobuf:"bytes,6,rep,name=dynamic_ports,json=dynamicPorts,proto3" json:"dynamic_ports,omitempty"`
}

func (x *NetworkResource) Reset() {
	*x = NetworkResource{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkResource) ProtoMessage() {}

func (x *NetworkResource) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkResource.ProtoReflect.Descriptor instead.
func (*NetworkResource) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{41}
}

func (x *NetworkResource) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *NetworkResource) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *NetworkResource) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkResource) GetMbits() int32 {
	if x != nil {
		return x.Mbits
	}
	return 0
}

func (x *NetworkResource) GetReservedPorts() []*NetworkPort {
	if x != nil {
		return x.ReservedPorts
	}
	return nil
}

func (x *NetworkResource) GetDynamicPorts() []*NetworkPort {
	if x != nil {
		return x.DynamicPorts
	}
	return nil
}

type NetworkPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NetworkPort) Reset() {
	*x = NetworkPort{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPort) ProtoMessage() {}

func (x *NetworkPort) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPort.ProtoReflect.Descriptor instead.
func (*NetworkPort) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{42}
}

func (x *NetworkPort) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NetworkPort) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PortMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value  int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	To     int32  `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	HostIp string `protobuf:"bytes,4,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
}

func (x *PortMapping) Reset() {
	*x = PortMapping{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMapping) ProtoMessage() {}

func (x *PortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMapping.ProtoReflect.Descriptor instead.
func (*PortMapping) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{43}
}

func (x *PortMapping) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PortMapping) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PortMapping) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *PortMapping) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

type LinuxResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU CFS (Completely Fair Scheduler) period. Default: 0 (not specified)
	CpuPeriod int64 `protobuf:"varint,1,opt,name=cpu_period,json=cpuPeriod,proto3" json:"cpu_period,omitempty"`
	// CPU CFS (Completely Fair Scheduler) quota. Default: 0 (not specified)
	CpuQuota int64 `protobuf:"varint,2,opt,name=cpu_quota,json=cpuQuota,proto3" json:"cpu_quota,omitempty"`
	// CPU shares (relative weight vs. other containers). Default: 0 (not specified)
	CpuShares int64 `protobuf:"varint,3,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	// Memory limit in bytes. Default: 0 (not specified)
	MemoryLimitBytes int64 `protobuf:"varint,4,opt,name=memory_limit_bytes,json=memoryLimitBytes,proto3" json:"memory_limit_bytes,omitempty"`
	// OOMScoreAdj adjusts the oom-killer score. Default: 0 (not specified)
	OomScoreAdj int64 `protobuf:"varint,5,opt,name=oom_score_adj,json=oomScoreAdj,proto3" json:"oom_score_adj,omitempty"`
	// CpusetCpus constrains the allowed set of logical CPUs. Default: "" (not specified)
	// This field exists to support drivers which can't set a cgroup path.
	CpusetCpus string `protobuf:"bytes,6,opt,name=cpuset_cpus,json=cpusetCpus,proto3" json:"cpuset_cpus,omitempty"`
	// CpusetCgroup is the path to the cpuset cgroup managed by the client
	CpusetCgroup string `protobuf:"bytes,9,opt,name=cpuset_cgroup,json=cpusetCgroup,proto3" json:"cpuset_cgroup,omitempty"`
	// PercentTicks is a compatibility option for docker and should not be used
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	PercentTicks float64 `protobuf:"fixed64,8,opt,name=PercentTicks,proto3" json:"PercentTicks,omitempty"`
}

func (x *LinuxResources) Reset() {
	*x = LinuxResources{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxResources) ProtoMessage() {}

func (x *LinuxResources) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxResources.ProtoReflect.Descriptor instead.
func (*LinuxResources) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{44}
}

func (x *LinuxResources) GetCpuPeriod() int64 {
	if x != nil {
		return x.CpuPeriod
	}
	return 0
}

func (x *LinuxResources) GetCpuQuota() int64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *LinuxResources) GetCpuShares() int64 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

func (x *LinuxResources) GetMemoryLimitBytes() int64 {
	if x != nil {
		return x.MemoryLimitBytes
	}
	return 0
}

func (x *LinuxResources) GetOomScoreAdj() int64 {
	if x != nil {
		return x.OomScoreAdj
	}
	return 0
}

func (x *LinuxResources) GetCpusetCpus() string {
	if x != nil {
		return x.CpusetCpus
	}
	return ""
}

func (x *LinuxResources) GetCpusetCgroup() string {
	if x != nil {
		return x.CpusetCgroup
	}
	return ""
}

func (x *LinuxResources) GetPercentTicks() float64 {
	if x != nil {
		return x.PercentTicks
	}
	return 0
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskPath is the file path within the task directory to mount to
	TaskPath string `protobuf:"bytes,1,opt,name=task_path,json=taskPath,proto3" json:"task_path,omitempty"`
	// HostPath is the file path on the host to mount from
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	// Readonly if set true, mounts the path in readonly mode
	Readonly bool `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Propagation mode for the mount. Not exactly the same as the unix mount
	// propagation flags. See callsite usage for details.
	PropagationMode string `protobuf:"bytes,4,opt,name=propagation_mode,json=propagationMode,proto3" json:"propagation_mode,omitempty"`
	SelinuxLabel    string `protobuf:"bytes,5,opt,name=selinux_label,json=selinuxLabel,proto3" json:"selinux_label,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{45}
}

func (x *Mount) GetTaskPath() string {
	if x != nil {
		return x.TaskPath
	}
	return ""
}

func (x *Mount) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Mount) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Mount) GetPropagationMode() string {
	if x != nil {
		return x.PropagationMode
	}
	return ""
}

func (x *Mount) GetSelinuxLabel() string {
	if x != nil {
		return x.SelinuxLabel
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskPath is the file path within the task to mount the device to
	TaskPath string `protobuf:"bytes,1,opt,name=task_path,json=taskPath,proto3" json:"task_path,omitempty"`
	// HostPath is the path on the host to the source device
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	// CgroupPermissions defines the Cgroup permissions of the device.
	// One or more of the following options can be set:
	//   - r - allows the task to read from the specified device.
	//   - w - allows the task to write to the specified device.
	//   - m - allows the task to create device files that do not yet exist.
	//
	// Example: "rw"
	CgroupPermissions string `protobuf:"bytes,3,opt,name=cgroup_permissions,json=cgroupPermissions,proto3" json:"cgroup_permissions,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{46}
}

func (x *Device) GetTaskPath() string {
	if x != nil {
		return x.TaskPath
	}
	return ""
}

func (x *Device) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Device) GetCgroupPermissions() string {
	if x != nil {
		return x.CgroupPermissions
	}
	return ""
}

// TaskHandle is created when starting a task and is used to recover task
type TaskHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version is used by the driver to version the DriverState schema.
	// Version 0 is reserved by Nomad and should not be used.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Config is the TaskConfig for the task
	Config *TaskConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// State is the state of the task's execution
	State TaskState `protobuf:"varint,3,opt,name=state,proto3,enum=hashicorp.nomad.plugins.drivers.proto.TaskState" json:"state,omitempty"`
	// DriverState is the encoded state for the specific driver
	DriverState []byte `protobuf:"bytes,4,opt,name=driver_state,json=driverState,proto3" json:"driver_state,omitempty"`
}

func (x *TaskHandle) Reset() {
	*x = TaskHandle{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHandle) ProtoMessage() {}

func (x *TaskHandle) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHandle.ProtoReflect.Descriptor instead.
func (*TaskHandle) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{47}
}

func (x *TaskHandle) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TaskHandle) GetConfig() *TaskConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TaskHandle) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_UNKNOWN
}

func (x *TaskHandle) GetDriverState() []byte {
	if x != nil {
		return x.DriverState
	}
	return nil
}

// NetworkOverride contains network settings which the driver may override
// for the task, such as when the driver is setting up the task's network.
type NetworkOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PortMap can be set to replace ports with driver-specific mappings
	PortMap map[string]int32 `protobuf:"bytes,1,rep,name=port_map,json=portMap,proto3" json:"port_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Addr is the IP address for the task created by the driver
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// AutoAdvertise indicates whether the driver thinks services that choose
	// to auto_advertise_addresses should use this IP instead of the host's.
	AutoAdvertise bool `protobuf:"varint,3,opt,name=auto_advertise,json=autoAdvertise,proto3" json:"auto_advertise,omitempty"`
}

func (x *NetworkOverride) Reset() {
	*x = NetworkOverride{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkOverride) ProtoMessage() {}

func (x *NetworkOverride) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkOverride.ProtoReflect.Descriptor instead.
func (*NetworkOverride) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{48}
}

func (x *NetworkOverride) GetPortMap() map[string]int32 {
	if x != nil {
		return x.PortMap
	}
	return nil
}

func (x *NetworkOverride) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NetworkOverride) GetAutoAdvertise() bool {
	if x != nil {
		return x.AutoAdvertise
	}
	return false
}

// ExitResult contains information about the exit status of a task
type ExitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExitCode returned from the task on exit
	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Signal is set if a signal was sent to the task
	Signal int32 `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
	// OomKilled is true if the task exited as a result of the OOM Killer
	OomKilled bool `protobuf:"varint,3,opt,name=oom_killed,json=oomKilled,proto3" json:"oom_killed,omitempty"`
}

func (x *ExitResult) Reset() {
	*x = ExitResult{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitResult) ProtoMessage() {}

func (x *ExitResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitResult.ProtoReflect.Descriptor instead.
func (*ExitResult) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{49}
}

func (x *ExitResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExitResult) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *ExitResult) GetOomKilled() bool {
	if x != nil {
		return x.OomKilled
	}
	return false
}

// TaskStatus includes information of a specific task
type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// State is the state of the task's execution
	State TaskState `protobuf:"varint,3,opt,name=state,proto3,enum=hashicorp.nomad.plugins.drivers.proto.TaskState" json:"state,omitempty"`
	// StartedAt is the timestamp when the task was started
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// CompletedAt is the timestamp when the task exited.
	// If the task is still running, CompletedAt will not be set
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Result is set when CompletedAt is set.
	Result *ExitResult `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{50}
}

func (x *TaskStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskStatus) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_UNKNOWN
}

func (x *TaskStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TaskStatus) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *TaskStatus) GetResult() *ExitResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TaskDriverStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attributes is a set of string/string key value pairs specific to the
	// implementing driver
	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskDriverStatus) Reset() {
	*x = TaskDriverStatus{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDriverStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDriverStatus) ProtoMessage() {}

func (x *TaskDriverStatus) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDriverStatus.ProtoReflect.Descriptor instead.
func (*TaskDriverStatus) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{51}
}

func (x *TaskDriverStatus) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TaskStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp for which the stats were collected
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// AggResourceUsage is the aggreate usage of all processes
	AggResourceUsage *TaskResourceUsage `protobuf:"bytes,3,opt,name=agg_resource_usage,json=aggResourceUsage,proto3" json:"agg_resource_usage,omitempty"`
	// ResourceUsageByPid breaks the usage stats by process
	ResourceUsageByPid map[string]*TaskResourceUsage `protobuf:"bytes,4,rep,name=resource_usage_by_pid,json=resourceUsageByPid,proto3" json:"resource_usage_by_pid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskStats) Reset() {
	*x = TaskStats{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStats) ProtoMessage() {}

func (x *TaskStats) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStats.ProtoReflect.Descriptor instead.
func (*TaskStats) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{52}
}

func (x *TaskStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TaskStats) GetAggResourceUsage() *TaskResourceUsage {
	if x != nil {
		return x.AggResourceUsage
	}
	return nil
}

func (x *TaskStats) GetResourceUsageByPid() map[string]*TaskResourceUsage {
	if x != nil {
		return x.ResourceUsageByPid
	}
	return nil
}

type TaskResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU usage stats
	Cpu *CPUUsage `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory usage stats
	Memory *MemoryUsage `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *TaskResourceUsage) Reset() {
	*x = TaskResourceUsage{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceUsage) ProtoMessage() {}

func (x *TaskResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceUsage.ProtoReflect.Descriptor instead.
func (*TaskResourceUsage) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{53}
}

func (x *TaskResourceUsage) GetCpu() *CPUUsage {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *TaskResourceUsage) GetMemory() *MemoryUsage {
	if x != nil {
		return x.Memory
	}
	return nil
}

type CPUUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemMode       float64 `protobuf:"fixed64,1,opt,name=system_mode,json=systemMode,proto3" json:"system_mode,omitempty"`
	UserMode         float64 `protobuf:"fixed64,2,opt,name=user_mode,json=userMode,proto3" json:"user_mode,omitempty"`
	TotalTicks       float64 `protobuf:"fixed64,3,opt,name=total_ticks,json=totalTicks,proto3" json:"total_ticks,omitempty"`
	ThrottledPeriods uint64  `protobuf:"varint,4,opt,name=throttled_periods,json=throttledPeriods,proto3" json:"throttled_periods,omitempty"`
	ThrottledTime    uint64  `protobuf:"varint,5,opt,name=throttled_time,json=throttledTime,proto3" json:"throttled_time,omitempty"`
	Percent          float64 `protobuf:"fixed64,6,opt,name=percent,proto3" json:"percent,omitempty"`
	// MeasuredFields indicates which fields were actually sampled
	MeasuredFields []CPUUsage_Fields `protobuf:"varint,7,rep,packed,name=measured_fields,json=measuredFields,proto3,enum=hashicorp.nomad.plugins.drivers.proto.CPUUsage_Fields" json:"measured_fields,omitempty"`
}

func (x *CPUUsage) Reset() {
	*x = CPUUsage{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUUsage) ProtoMessage() {}

func (x *CPUUsage) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUUsage.ProtoReflect.Descriptor instead.
func (*CPUUsage) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{54}
}

func (x *CPUUsage) GetSystemMode() float64 {
	if x != nil {
		return x.SystemMode
	}
	return 0
}

func (x *CPUUsage) GetUserMode() float64 {
	if x != nil {
		return x.UserMode
	}
	return 0
}

func (x *CPUUsage) GetTotalTicks() float64 {
	if x != nil {
		return x.TotalTicks
	}
	return 0
}

func (x *CPUUsage) GetThrottledPeriods() uint64 {
	if x != nil {
		return x.ThrottledPeriods
	}
	return 0
}

func (x *CPUUsage) GetThrottledTime() uint64 {
	if x != nil {
		return x.ThrottledTime
	}
	return 0
}

func (x *CPUUsage) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *CPUUsage) GetMeasuredFields() []CPUUsage_Fields {
	if x != nil {
		return x.MeasuredFields
	}
	return nil
}

type MemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rss            uint64 `protobuf:"varint,1,opt,name=rss,proto3" json:"rss,omitempty"`
	Cache          uint64 `protobuf:"varint,2,opt,name=cache,proto3" json:"cache,omitempty"`
	MaxUsage       uint64 `protobuf:"varint,3,opt,name=max_usage,json=maxUsage,proto3" json:"max_usage,omitempty"`
	KernelUsage    uint64 `protobuf:"varint,4,opt,name=kernel_usage,json=kernelUsage,proto3" json:"kernel_usage,omitempty"`
	KernelMaxUsage uint64 `protobuf:"varint,5,opt,name=kernel_max_usage,json=kernelMaxUsage,proto3" json:"kernel_max_usage,omitempty"`
	Usage          uint64 `protobuf:"varint,7,opt,name=usage,proto3" json:"usage,omitempty"`
	Swap           uint64 `protobuf:"varint,8,opt,name=swap,proto3" json:"swap,omitempty"`
	// MeasuredFields indicates which fields were actually sampled
	MeasuredFields []MemoryUsage_Fields `protobuf:"varint,6,rep,packed,name=measured_fields,json=measuredFields,proto3,enum=hashicorp.nomad.plugins.drivers.proto.MemoryUsage_Fields" json:"measured_fields,omitempty"`
}

func (x *MemoryUsage) Reset() {
	*x = MemoryUsage{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUsage) ProtoMessage() {}

func (x *MemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUsage.ProtoReflect.Descriptor instead.
func (*MemoryUsage) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{55}
}

func (x *MemoryUsage) GetRss() uint64 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *MemoryUsage) GetCache() uint64 {
	if x != nil {
		return x.Cache
	}
	return 0
}

func (x *MemoryUsage) GetMaxUsage() uint64 {
	if x != nil {
		return x.MaxUsage
	}
	return 0
}

func (x *MemoryUsage) GetKernelUsage() uint64 {
	if x != nil {
		return x.KernelUsage
	}
	return 0
}

func (x *MemoryUsage) GetKernelMaxUsage() uint64 {
	if x != nil {
		return x.KernelMaxUsage
	}
	return 0
}

func (x *MemoryUsage) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *MemoryUsage) GetSwap() uint64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *MemoryUsage) GetMeasuredFields() []MemoryUsage_Fields {
	if x != nil {
		return x.MeasuredFields
	}
	return nil
}

type DriverTaskEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId is the id of the task for the event
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// AllocId of the task for the event
	AllocId string `protobuf:"bytes,2,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	// TaskName is the name of the task for the event
	TaskName string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// Timestamp when the event occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Message is the body of the event
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Annotations allows for additional key/value data to be sent along with the event
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DriverTaskEvent) Reset() {
	*x = DriverTaskEvent{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverTaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverTaskEvent) ProtoMessage() {}

func (x *DriverTaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverTaskEvent.ProtoReflect.Descriptor instead.
func (*DriverTaskEvent) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{56}
}

func (x *DriverTaskEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DriverTaskEvent) GetAllocId() string {
	if x != nil {
		return x.AllocId
	}
	return ""
}

func (x *DriverTaskEvent) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DriverTaskEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DriverTaskEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DriverTaskEvent) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ExecTaskStreamingRequest_Setup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	Tty     bool     `protobuf:"varint,3,opt,name=tty,proto3" json:"tty,omitempty"`
}

func (x *ExecTaskStreamingRequest_Setup) Reset() {
	*x = ExecTaskStreamingRequest_Setup{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskStreamingRequest_Setup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskStreamingRequest_Setup) ProtoMessage() {}

func (x *ExecTaskStreamingRequest_Setup) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskStreamingRequest_Setup.ProtoReflect.Descriptor instead.
func (*ExecTaskStreamingRequest_Setup) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ExecTaskStreamingRequest_Setup) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecTaskStreamingRequest_Setup) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecTaskStreamingRequest_Setup) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

type ExecTaskStreamingRequest_TerminalSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width  int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *ExecTaskStreamingRequest_TerminalSize) Reset() {
	*x = ExecTaskStreamingRequest_TerminalSize{}
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecTaskStreamingRequest_TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTaskStreamingRequest_TerminalSize) ProtoMessage() {}

func (x *ExecTaskStreamingRequest_TerminalSize) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_drivers_proto_driver_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTaskStreamingRequest_TerminalSize.ProtoReflect.Descriptor instead.
func (*ExecTaskStreamingRequest_TerminalSize) Descriptor() ([]byte, []int) {
	return file_plugins_drivers_proto_driver_proto_rawDescGZIP(), []int{26, 1}
}

func (x *ExecTaskStreamingRequest_TerminalSize) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ExecTaskStreamingRequest_TerminalSize) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

var File_plugins_drivers_proto_driver_proto protoreflect.FileDescriptor

var file_plugins_drivers_proto_driver_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x68, 0x63, 0x6c,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x68, 0x63, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x18,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x68, 0x63, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x75, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbd,
	0x03, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x70, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x22, 0x78,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x59, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xf1, 0x02, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x61,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x22, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x2a,
	0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x10, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x77, 0x0a, 0x0f, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x5b, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x44, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x49, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x4f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0x67, 0x0a, 0x08,
	0x74, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x74, 0x74,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x4f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x1a, 0x4c, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x79, 0x1a, 0x3c,
	0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb8, 0x02, 0x0a,
	0x19, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x49, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf3, 0x05, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x78, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12,
	0x68, 0x0a, 0x0c, 0x66, 0x73, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x46, 0x53, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x73,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x6b, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x46, 0x53, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x48, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x56, 0x45, 0x49, 0x4c, 0x10, 0x03,
	0x22, 0x45, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x59, 0x5f, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc3, 0x03, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x64, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5f, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x14,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0x43, 0x0a,
	0x0b, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xff, 0x08, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x5f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x44, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa5, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x16, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x57, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x22, 0x36, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70,
	0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x70, 0x75, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x18, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x4d, 0x62, 0x22, 0x97, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x39, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x0b, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x22,
	0xba, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x43, 0x70, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52,
	0x0b, 0x63, 0x70, 0x75, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x71, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xdc, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x1a, 0x3a, 0x0a,
	0x0c, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x0a, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6f, 0x6f, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x10,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x67, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x66, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x61, 0x67, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x50, 0x69, 0x64, 0x1a, 0x7f, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x4a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xab, 0x03, 0x0a, 0x08,
	0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x53, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x48, 0x52, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x68, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x58, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x41,
	0x50, 0x10, 0x06, 0x22, 0xe1, 0x02, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x31, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xa2, 0x11, 0x0a, 0x06, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3e, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7d, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86,
	0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7d, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9c, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8c,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x3b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x3c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x6d, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_plugins_drivers_proto_driver_proto_rawDescOnce sync.Once
	file_plugins_drivers_proto_driver_proto_rawDescData = file_plugins_drivers_proto_driver_proto_rawDesc
)

func file_plugins_drivers_proto_driver_proto_rawDescGZIP() []byte {
	file_plugins_drivers_proto_driver_proto_rawDescOnce.Do(func() {
		file_plugins_drivers_proto_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_drivers_proto_driver_proto_rawDescData)
	})
	return file_plugins_drivers_proto_driver_proto_rawDescData
}

var file_plugins_drivers_proto_driver_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_plugins_drivers_proto_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_plugins_drivers_proto_driver_proto_goTypes = []any{
	(TaskState)(0),                                 // 0: hashicorp.nomad.plugins.drivers.proto.TaskState
	(FingerprintResponse_HealthState)(0),           // 1: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.HealthState
	(StartTaskResponse_Result)(0),                  // 2: hashicorp.nomad.plugins.drivers.proto.StartTaskResponse.Result
	(DriverCapabilities_FSIsolation)(0),            // 3: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.FSIsolation
	(DriverCapabilities_MountConfigs)(0),           // 4: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.MountConfigs
	(NetworkIsolationSpec_NetworkIsolationMode)(0), // 5: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.NetworkIsolationMode
	(CPUUsage_Fields)(0),                           // 6: hashicorp.nomad.plugins.drivers.proto.CPUUsage.Fields
	(MemoryUsage_Fields)(0),                        // 7: hashicorp.nomad.plugins.drivers.proto.MemoryUsage.Fields
	(*TaskConfigSchemaRequest)(nil),                // 8: hashicorp.nomad.plugins.drivers.proto.TaskConfigSchemaRequest
	(*TaskConfigSchemaResponse)(nil),               // 9: hashicorp.nomad.plugins.drivers.proto.TaskConfigSchemaResponse
	(*CapabilitiesRequest)(nil),                    // 10: hashicorp.nomad.plugins.drivers.proto.CapabilitiesRequest
	(*CapabilitiesResponse)(nil),                   // 11: hashicorp.nomad.plugins.drivers.proto.CapabilitiesResponse
	(*FingerprintRequest)(nil),                     // 12: hashicorp.nomad.plugins.drivers.proto.FingerprintRequest
	(*FingerprintResponse)(nil),                    // 13: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse
	(*RecoverTaskRequest)(nil),                     // 14: hashicorp.nomad.plugins.drivers.proto.RecoverTaskRequest
	(*RecoverTaskResponse)(nil),                    // 15: hashicorp.nomad.plugins.drivers.proto.RecoverTaskResponse
	(*StartTaskRequest)(nil),                       // 16: hashicorp.nomad.plugins.drivers.proto.StartTaskRequest
	(*StartTaskResponse)(nil),                      // 17: hashicorp.nomad.plugins.drivers.proto.StartTaskResponse
	(*WaitTaskRequest)(nil),                        // 18: hashicorp.nomad.plugins.drivers.proto.WaitTaskRequest
	(*WaitTaskResponse)(nil),                       // 19: hashicorp.nomad.plugins.drivers.proto.WaitTaskResponse
	(*StopTaskRequest)(nil),                        // 20: hashicorp.nomad.plugins.drivers.proto.StopTaskRequest
	(*StopTaskResponse)(nil),                       // 21: hashicorp.nomad.plugins.drivers.proto.StopTaskResponse
	(*DestroyTaskRequest)(nil),                     // 22: hashicorp.nomad.plugins.drivers.proto.DestroyTaskRequest
	(*DestroyTaskResponse)(nil),                    // 23: hashicorp.nomad.plugins.drivers.proto.DestroyTaskResponse
	(*InspectTaskRequest)(nil),                     // 24: hashicorp.nomad.plugins.drivers.proto.InspectTaskRequest
	(*InspectTaskResponse)(nil),                    // 25: hashicorp.nomad.plugins.drivers.proto.InspectTaskResponse
	(*TaskStatsRequest)(nil),                       // 26: hashicorp.nomad.plugins.drivers.proto.TaskStatsRequest
	(*TaskStatsResponse)(nil),                      // 27: hashicorp.nomad.plugins.drivers.proto.TaskStatsResponse
	(*TaskEventsRequest)(nil),                      // 28: hashicorp.nomad.plugins.drivers.proto.TaskEventsRequest
	(*SignalTaskRequest)(nil),                      // 29: hashicorp.nomad.plugins.drivers.proto.SignalTaskRequest
	(*SignalTaskResponse)(nil),                     // 30: hashicorp.nomad.plugins.drivers.proto.SignalTaskResponse
	(*ExecTaskRequest)(nil),                        // 31: hashicorp.nomad.plugins.drivers.proto.ExecTaskRequest
	(*ExecTaskResponse)(nil),                       // 32: hashicorp.nomad.plugins.drivers.proto.ExecTaskResponse
	(*ExecTaskStreamingIOOperation)(nil),           // 33: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingIOOperation
	(*ExecTaskStreamingRequest)(nil),               // 34: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest
	(*ExecTaskStreamingResponse)(nil),              // 35: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingResponse
	(*CreateNetworkRequest)(nil),                   // 36: hashicorp.nomad.plugins.drivers.proto.CreateNetworkRequest
	(*CreateNetworkResponse)(nil),                  // 37: hashicorp.nomad.plugins.drivers.proto.CreateNetworkResponse
	(*DestroyNetworkRequest)(nil),                  // 38: hashicorp.nomad.plugins.drivers.proto.DestroyNetworkRequest
	(*DestroyNetworkResponse)(nil),                 // 39: hashicorp.nomad.plugins.drivers.proto.DestroyNetworkResponse
	(*DriverCapabilities)(nil),                     // 40: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities
	(*NetworkIsolationSpec)(nil),                   // 41: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec
	(*HostsConfig)(nil),                            // 42: hashicorp.nomad.plugins.drivers.proto.HostsConfig
	(*DNSConfig)(nil),                              // 43: hashicorp.nomad.plugins.drivers.proto.DNSConfig
	(*TaskConfig)(nil),                             // 44: hashicorp.nomad.plugins.drivers.proto.TaskConfig
	(*Resources)(nil),                              // 45: hashicorp.nomad.plugins.drivers.proto.Resources
	(*AllocatedTaskResources)(nil),                 // 46: hashicorp.nomad.plugins.drivers.proto.AllocatedTaskResources
	(*AllocatedCpuResources)(nil),                  // 47: hashicorp.nomad.plugins.drivers.proto.AllocatedCpuResources
	(*AllocatedMemoryResources)(nil),               // 48: hashicorp.nomad.plugins.drivers.proto.AllocatedMemoryResources
	(*NetworkResource)(nil),                        // 49: hashicorp.nomad.plugins.drivers.proto.NetworkResource
	(*NetworkPort)(nil),                            // 50: hashicorp.nomad.plugins.drivers.proto.NetworkPort
	(*PortMapping)(nil),                            // 51: hashicorp.nomad.plugins.drivers.proto.PortMapping
	(*LinuxResources)(nil),                         // 52: hashicorp.nomad.plugins.drivers.proto.LinuxResources
	(*Mount)(nil),                                  // 53: hashicorp.nomad.plugins.drivers.proto.Mount
	(*Device)(nil),                                 // 54: hashicorp.nomad.plugins.drivers.proto.Device
	(*TaskHandle)(nil),                             // 55: hashicorp.nomad.plugins.drivers.proto.TaskHandle
	(*NetworkOverride)(nil),                        // 56: hashicorp.nomad.plugins.drivers.proto.NetworkOverride
	(*ExitResult)(nil),                             // 57: hashicorp.nomad.plugins.drivers.proto.ExitResult
	(*TaskStatus)(nil),                             // 58: hashicorp.nomad.plugins.drivers.proto.TaskStatus
	(*TaskDriverStatus)(nil),                       // 59: hashicorp.nomad.plugins.drivers.proto.TaskDriverStatus
	(*TaskStats)(nil),                              // 60: hashicorp.nomad.plugins.drivers.proto.TaskStats
	(*TaskResourceUsage)(nil),                      // 61: hashicorp.nomad.plugins.drivers.proto.TaskResourceUsage
	(*CPUUsage)(nil),                               // 62: hashicorp.nomad.plugins.drivers.proto.CPUUsage
	(*MemoryUsage)(nil),                            // 63: hashicorp.nomad.plugins.drivers.proto.MemoryUsage
	(*DriverTaskEvent)(nil),                        // 64: hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent
	nil,                                            // 65: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.AttributesEntry
	(*ExecTaskStreamingRequest_Setup)(nil),         // 66: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.Setup
	(*ExecTaskStreamingRequest_TerminalSize)(nil),  // 67: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.TerminalSize
	nil,                           // 68: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.LabelsEntry
	nil,                           // 69: hashicorp.nomad.plugins.drivers.proto.TaskConfig.EnvEntry
	nil,                           // 70: hashicorp.nomad.plugins.drivers.proto.TaskConfig.DeviceEnvEntry
	nil,                           // 71: hashicorp.nomad.plugins.drivers.proto.NetworkOverride.PortMapEntry
	nil,                           // 72: hashicorp.nomad.plugins.drivers.proto.TaskDriverStatus.AttributesEntry
	nil,                           // 73: hashicorp.nomad.plugins.drivers.proto.TaskStats.ResourceUsageByPidEntry
	nil,                           // 74: hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent.AnnotationsEntry
	(*hclspec.Spec)(nil),          // 75: hashicorp.nomad.plugins.shared.hclspec.Spec
	(*durationpb.Duration)(nil),   // 76: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 77: google.protobuf.Timestamp
	(*proto.Attribute)(nil),       // 78: hashicorp.nomad.plugins.shared.structs.Attribute
}
var file_plugins_drivers_proto_driver_proto_depIdxs = []int32{
	75, // 0: hashicorp.nomad.plugins.drivers.proto.TaskConfigSchemaResponse.spec:type_name -> hashicorp.nomad.plugins.shared.hclspec.Spec
	40, // 1: hashicorp.nomad.plugins.drivers.proto.CapabilitiesResponse.capabilities:type_name -> hashicorp.nomad.plugins.drivers.proto.DriverCapabilities
	65, // 2: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.attributes:type_name -> hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.AttributesEntry
	1,  // 3: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.health:type_name -> hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.HealthState
	55, // 4: hashicorp.nomad.plugins.drivers.proto.RecoverTaskRequest.handle:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskHandle
	44, // 5: hashicorp.nomad.plugins.drivers.proto.StartTaskRequest.task:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskConfig
	2,  // 6: hashicorp.nomad.plugins.drivers.proto.StartTaskResponse.result:type_name -> hashicorp.nomad.plugins.drivers.proto.StartTaskResponse.Result
	55, // 7: hashicorp.nomad.plugins.drivers.proto.StartTaskResponse.handle:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskHandle
	56, // 8: hashicorp.nomad.plugins.drivers.proto.StartTaskResponse.network_override:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkOverride
	57, // 9: hashicorp.nomad.plugins.drivers.proto.WaitTaskResponse.result:type_name -> hashicorp.nomad.plugins.drivers.proto.ExitResult
	76, // 10: hashicorp.nomad.plugins.drivers.proto.StopTaskRequest.timeout:type_name -> google.protobuf.Duration
	58, // 11: hashicorp.nomad.plugins.drivers.proto.InspectTaskResponse.task:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskStatus
	59, // 12: hashicorp.nomad.plugins.drivers.proto.InspectTaskResponse.driver:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskDriverStatus
	56, // 13: hashicorp.nomad.plugins.drivers.proto.InspectTaskResponse.network_override:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkOverride
	76, // 14: hashicorp.nomad.plugins.drivers.proto.TaskStatsRequest.collection_interval:type_name -> google.protobuf.Duration
	60, // 15: hashicorp.nomad.plugins.drivers.proto.TaskStatsResponse.stats:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskStats
	76, // 16: hashicorp.nomad.plugins.drivers.proto.ExecTaskRequest.timeout:type_name -> google.protobuf.Duration
	57, // 17: hashicorp.nomad.plugins.drivers.proto.ExecTaskResponse.result:type_name -> hashicorp.nomad.plugins.drivers.proto.ExitResult
	66, // 18: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.setup:type_name -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.Setup
	67, // 19: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.tty_size:type_name -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.TerminalSize
	33, // 20: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest.stdin:type_name -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingIOOperation
	33, // 21: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingResponse.stdout:type_name -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingIOOperation
	33, // 22: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingResponse.stderr:type_name -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingIOOperation
	57, // 23: hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingResponse.result:type_name -> hashicorp.nomad.plugins.drivers.proto.ExitResult
	41, // 24: hashicorp.nomad.plugins.drivers.proto.CreateNetworkResponse.isolation_spec:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec
	41, // 25: hashicorp.nomad.plugins.drivers.proto.DestroyNetworkRequest.isolation_spec:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec
	3,  // 26: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.fs_isolation:type_name -> hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.FSIsolation
	5,  // 27: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.network_isolation_modes:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.NetworkIsolationMode
	4,  // 28: hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.mount_configs:type_name -> hashicorp.nomad.plugins.drivers.proto.DriverCapabilities.MountConfigs
	5,  // 29: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.mode:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.NetworkIsolationMode
	68, // 30: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.labels:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.LabelsEntry
	42, // 31: hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec.hostsConfig:type_name -> hashicorp.nomad.plugins.drivers.proto.HostsConfig
	69, // 32: hashicorp.nomad.plugins.drivers.proto.TaskConfig.env:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskConfig.EnvEntry
	70, // 33: hashicorp.nomad.plugins.drivers.proto.TaskConfig.device_env:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskConfig.DeviceEnvEntry
	45, // 34: hashicorp.nomad.plugins.drivers.proto.TaskConfig.resources:type_name -> hashicorp.nomad.plugins.drivers.proto.Resources
	53, // 35: hashicorp.nomad.plugins.drivers.proto.TaskConfig.mounts:type_name -> hashicorp.nomad.plugins.drivers.proto.Mount
	54, // 36: hashicorp.nomad.plugins.drivers.proto.TaskConfig.devices:type_name -> hashicorp.nomad.plugins.drivers.proto.Device
	41, // 37: hashicorp.nomad.plugins.drivers.proto.TaskConfig.network_isolation_spec:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkIsolationSpec
	43, // 38: hashicorp.nomad.plugins.drivers.proto.TaskConfig.dns:type_name -> hashicorp.nomad.plugins.drivers.proto.DNSConfig
	46, // 39: hashicorp.nomad.plugins.drivers.proto.Resources.allocated_resources:type_name -> hashicorp.nomad.plugins.drivers.proto.AllocatedTaskResources
	52, // 40: hashicorp.nomad.plugins.drivers.proto.Resources.linux_resources:type_name -> hashicorp.nomad.plugins.drivers.proto.LinuxResources
	51, // 41: hashicorp.nomad.plugins.drivers.proto.Resources.ports:type_name -> hashicorp.nomad.plugins.drivers.proto.PortMapping
	47, // 42: hashicorp.nomad.plugins.drivers.proto.AllocatedTaskResources.cpu:type_name -> hashicorp.nomad.plugins.drivers.proto.AllocatedCpuResources
	48, // 43: hashicorp.nomad.plugins.drivers.proto.AllocatedTaskResources.memory:type_name -> hashicorp.nomad.plugins.drivers.proto.AllocatedMemoryResources
	49, // 44: hashicorp.nomad.plugins.drivers.proto.AllocatedTaskResources.networks:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkResource
	50, // 45: hashicorp.nomad.plugins.drivers.proto.NetworkResource.reserved_ports:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkPort
	50, // 46: hashicorp.nomad.plugins.drivers.proto.NetworkResource.dynamic_ports:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkPort
	44, // 47: hashicorp.nomad.plugins.drivers.proto.TaskHandle.config:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskConfig
	0,  // 48: hashicorp.nomad.plugins.drivers.proto.TaskHandle.state:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskState
	71, // 49: hashicorp.nomad.plugins.drivers.proto.NetworkOverride.port_map:type_name -> hashicorp.nomad.plugins.drivers.proto.NetworkOverride.PortMapEntry
	0,  // 50: hashicorp.nomad.plugins.drivers.proto.TaskStatus.state:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskState
	77, // 51: hashicorp.nomad.plugins.drivers.proto.TaskStatus.started_at:type_name -> google.protobuf.Timestamp
	77, // 52: hashicorp.nomad.plugins.drivers.proto.TaskStatus.completed_at:type_name -> google.protobuf.Timestamp
	57, // 53: hashicorp.nomad.plugins.drivers.proto.TaskStatus.result:type_name -> hashicorp.nomad.plugins.drivers.proto.ExitResult
	72, // 54: hashicorp.nomad.plugins.drivers.proto.TaskDriverStatus.attributes:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskDriverStatus.AttributesEntry
	77, // 55: hashicorp.nomad.plugins.drivers.proto.TaskStats.timestamp:type_name -> google.protobuf.Timestamp
	61, // 56: hashicorp.nomad.plugins.drivers.proto.TaskStats.agg_resource_usage:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskResourceUsage
	73, // 57: hashicorp.nomad.plugins.drivers.proto.TaskStats.resource_usage_by_pid:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskStats.ResourceUsageByPidEntry
	62, // 58: hashicorp.nomad.plugins.drivers.proto.TaskResourceUsage.cpu:type_name -> hashicorp.nomad.plugins.drivers.proto.CPUUsage
	63, // 59: hashicorp.nomad.plugins.drivers.proto.TaskResourceUsage.memory:type_name -> hashicorp.nomad.plugins.drivers.proto.MemoryUsage
	6,  // 60: hashicorp.nomad.plugins.drivers.proto.CPUUsage.measured_fields:type_name -> hashicorp.nomad.plugins.drivers.proto.CPUUsage.Fields
	7,  // 61: hashicorp.nomad.plugins.drivers.proto.MemoryUsage.measured_fields:type_name -> hashicorp.nomad.plugins.drivers.proto.MemoryUsage.Fields
	77, // 62: hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent.timestamp:type_name -> google.protobuf.Timestamp
	74, // 63: hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent.annotations:type_name -> hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent.AnnotationsEntry
	78, // 64: hashicorp.nomad.plugins.drivers.proto.FingerprintResponse.AttributesEntry.value:type_name -> hashicorp.nomad.plugins.shared.structs.Attribute
	61, // 65: hashicorp.nomad.plugins.drivers.proto.TaskStats.ResourceUsageByPidEntry.value:type_name -> hashicorp.nomad.plugins.drivers.proto.TaskResourceUsage
	8,  // 66: hashicorp.nomad.plugins.drivers.proto.Driver.TaskConfigSchema:input_type -> hashicorp.nomad.plugins.drivers.proto.TaskConfigSchemaRequest
	10, // 67: hashicorp.nomad.plugins.drivers.proto.Driver.Capabilities:input_type -> hashicorp.nomad.plugins.drivers.proto.CapabilitiesRequest
	12, // 68: hashicorp.nomad.plugins.drivers.proto.Driver.Fingerprint:input_type -> hashicorp.nomad.plugins.drivers.proto.FingerprintRequest
	14, // 69: hashicorp.nomad.plugins.drivers.proto.Driver.RecoverTask:input_type -> hashicorp.nomad.plugins.drivers.proto.RecoverTaskRequest
	16, // 70: hashicorp.nomad.plugins.drivers.proto.Driver.StartTask:input_type -> hashicorp.nomad.plugins.drivers.proto.StartTaskRequest
	18, // 71: hashicorp.nomad.plugins.drivers.proto.Driver.WaitTask:input_type -> hashicorp.nomad.plugins.drivers.proto.WaitTaskRequest
	20, // 72: hashicorp.nomad.plugins.drivers.proto.Driver.StopTask:input_type -> hashicorp.nomad.plugins.drivers.proto.StopTaskRequest
	22, // 73: hashicorp.nomad.plugins.drivers.proto.Driver.DestroyTask:input_type -> hashicorp.nomad.plugins.drivers.proto.DestroyTaskRequest
	24, // 74: hashicorp.nomad.plugins.drivers.proto.Driver.InspectTask:input_type -> hashicorp.nomad.plugins.drivers.proto.InspectTaskRequest
	26, // 75: hashicorp.nomad.plugins.drivers.proto.Driver.TaskStats:input_type -> hashicorp.nomad.plugins.drivers.proto.TaskStatsRequest
	28, // 76: hashicorp.nomad.plugins.drivers.proto.Driver.TaskEvents:input_type -> hashicorp.nomad.plugins.drivers.proto.TaskEventsRequest
	29, // 77: hashicorp.nomad.plugins.drivers.proto.Driver.SignalTask:input_type -> hashicorp.nomad.plugins.drivers.proto.SignalTaskRequest
	31, // 78: hashicorp.nomad.plugins.drivers.proto.Driver.ExecTask:input_type -> hashicorp.nomad.plugins.drivers.proto.ExecTaskRequest
	34, // 79: hashicorp.nomad.plugins.drivers.proto.Driver.ExecTaskStreaming:input_type -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingRequest
	36, // 80: hashicorp.nomad.plugins.drivers.proto.Driver.CreateNetwork:input_type -> hashicorp.nomad.plugins.drivers.proto.CreateNetworkRequest
	38, // 81: hashicorp.nomad.plugins.drivers.proto.Driver.DestroyNetwork:input_type -> hashicorp.nomad.plugins.drivers.proto.DestroyNetworkRequest
	9,  // 82: hashicorp.nomad.plugins.drivers.proto.Driver.TaskConfigSchema:output_type -> hashicorp.nomad.plugins.drivers.proto.TaskConfigSchemaResponse
	11, // 83: hashicorp.nomad.plugins.drivers.proto.Driver.Capabilities:output_type -> hashicorp.nomad.plugins.drivers.proto.CapabilitiesResponse
	13, // 84: hashicorp.nomad.plugins.drivers.proto.Driver.Fingerprint:output_type -> hashicorp.nomad.plugins.drivers.proto.FingerprintResponse
	15, // 85: hashicorp.nomad.plugins.drivers.proto.Driver.RecoverTask:output_type -> hashicorp.nomad.plugins.drivers.proto.RecoverTaskResponse
	17, // 86: hashicorp.nomad.plugins.drivers.proto.Driver.StartTask:output_type -> hashicorp.nomad.plugins.drivers.proto.StartTaskResponse
	19, // 87: hashicorp.nomad.plugins.drivers.proto.Driver.WaitTask:output_type -> hashicorp.nomad.plugins.drivers.proto.WaitTaskResponse
	21, // 88: hashicorp.nomad.plugins.drivers.proto.Driver.StopTask:output_type -> hashicorp.nomad.plugins.drivers.proto.StopTaskResponse
	23, // 89: hashicorp.nomad.plugins.drivers.proto.Driver.DestroyTask:output_type -> hashicorp.nomad.plugins.drivers.proto.DestroyTaskResponse
	25, // 90: hashicorp.nomad.plugins.drivers.proto.Driver.InspectTask:output_type -> hashicorp.nomad.plugins.drivers.proto.InspectTaskResponse
	27, // 91: hashicorp.nomad.plugins.drivers.proto.Driver.TaskStats:output_type -> hashicorp.nomad.plugins.drivers.proto.TaskStatsResponse
	64, // 92: hashicorp.nomad.plugins.drivers.proto.Driver.TaskEvents:output_type -> hashicorp.nomad.plugins.drivers.proto.DriverTaskEvent
	30, // 93: hashicorp.nomad.plugins.drivers.proto.Driver.SignalTask:output_type -> hashicorp.nomad.plugins.drivers.proto.SignalTaskResponse
	32, // 94: hashicorp.nomad.plugins.drivers.proto.Driver.ExecTask:output_type -> hashicorp.nomad.plugins.drivers.proto.ExecTaskResponse
	35, // 95: hashicorp.nomad.plugins.drivers.proto.Driver.ExecTaskStreaming:output_type -> hashicorp.nomad.plugins.drivers.proto.ExecTaskStreamingResponse
	37, // 96: hashicorp.nomad.plugins.drivers.proto.Driver.CreateNetwork:output_type -> hashicorp.nomad.plugins.drivers.proto.CreateNetworkResponse
	39, // 97: hashicorp.nomad.plugins.drivers.proto.Driver.DestroyNetwork:output_type -> hashicorp.nomad.plugins.drivers.proto.DestroyNetworkResponse
	82, // [82:98] is the sub-list for method output_type
	66, // [66:82] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_plugins_drivers_proto_driver_proto_init() }
func file_plugins_drivers_proto_driver_proto_init() {
	if File_plugins_drivers_proto_driver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_drivers_proto_driver_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugins_drivers_proto_driver_proto_goTypes,
		DependencyIndexes: file_plugins_drivers_proto_driver_proto_depIdxs,
		EnumInfos:         file_plugins_drivers_proto_driver_proto_enumTypes,
		MessageInfos:      file_plugins_drivers_proto_driver_proto_msgTypes,
	}.Build()
	File_plugins_drivers_proto_driver_proto = out.File
	file_plugins_drivers_proto_driver_proto_rawDesc = nil
	file_plugins_drivers_proto_driver_proto_goTypes = nil
	file_plugins_drivers_proto_driver_proto_depIdxs = nil
}
